// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                             db,
		CasbinRule:                     newCasbinRule(db, opts...),
		ImAvatar:                       newImAvatar(db, opts...),
		ImBlack:                        newImBlack(db, opts...),
		ImFeedback:                     newImFeedback(db, opts...),
		ImFriend:                       newImFriend(db, opts...),
		ImFriendRequest:                newImFriendRequest(db, opts...),
		ImFunctionalConfig:             newImFunctionalConfig(db, opts...),
		ImGroup:                        newImGroup(db, opts...),
		ImGroupMember:                  newImGroupMember(db, opts...),
		ImGroupRequest:                 newImGroupRequest(db, opts...),
		ImHandleLog:                    newImHandleLog(db, opts...),
		ImIPBlacklist:                  newImIPBlacklist(db, opts...),
		ImIPBlacklistRelationUser:      newImIPBlacklistRelationUser(db, opts...),
		ImIPWhitelist:                  newImIPWhitelist(db, opts...),
		ImKefuConversation:             newImKefuConversation(db, opts...),
		ImLoginDevice:                  newImLoginDevice(db, opts...),
		ImLoginLog:                     newImLoginLog(db, opts...),
		ImPrivilegeUser:                newImPrivilegeUser(db, opts...),
		ImPrivilegeUserBindLoginDevice: newImPrivilegeUserBindLoginDevice(db, opts...),
		ImPrivilegeUserBindLoginIP:     newImPrivilegeUserBindLoginIP(db, opts...),
		ImPrivilegeUserLog:             newImPrivilegeUserLog(db, opts...),
		ImRegister:                     newImRegister(db, opts...),
		ImRobot:                        newImRobot(db, opts...),
		ImSecurityQuestion:             newImSecurityQuestion(db, opts...),
		ImSensitiveLib:                 newImSensitiveLib(db, opts...),
		ImSensitiveWord:                newImSensitiveWord(db, opts...),
		ImSystemMessage:                newImSystemMessage(db, opts...),
		ImUser:                         newImUser(db, opts...),
		ImUserCode:                     newImUserCode(db, opts...),
		ImUserProhibitedBehavior:       newImUserProhibitedBehavior(db, opts...),
		ImUserSecurityQuestion:         newImUserSecurityQuestion(db, opts...),
		ImUsersDeviceConf:              newImUsersDeviceConf(db, opts...),
		JwtBlacklist:                   newJwtBlacklist(db, opts...),
		LogJob:                         newLogJob(db, opts...),
		LogLogin:                       newLogLogin(db, opts...),
		LogOper:                        newLogOper(db, opts...),
		SysAPI:                         newSysAPI(db, opts...),
		SysDept:                        newSysDept(db, opts...),
		SysDictDatum:                   newSysDictDatum(db, opts...),
		SysDictType:                    newSysDictType(db, opts...),
		SysDiscovery:                   newSysDiscovery(db, opts...),
		SysJob:                         newSysJob(db, opts...),
		SysMenu:                        newSysMenu(db, opts...),
		SysMenuBtn:                     newSysMenuBtn(db, opts...),
		SysPost:                        newSysPost(db, opts...),
		SysRole:                        newSysRole(db, opts...),
		SysRoleBtn:                     newSysRoleBtn(db, opts...),
		SysRoleDept:                    newSysRoleDept(db, opts...),
		SysRoleMenu:                    newSysRoleMenu(db, opts...),
		SysUser:                        newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CasbinRule                     casbinRule
	ImAvatar                       imAvatar
	ImBlack                        imBlack
	ImFeedback                     imFeedback
	ImFriend                       imFriend
	ImFriendRequest                imFriendRequest
	ImFunctionalConfig             imFunctionalConfig
	ImGroup                        imGroup
	ImGroupMember                  imGroupMember
	ImGroupRequest                 imGroupRequest
	ImHandleLog                    imHandleLog
	ImIPBlacklist                  imIPBlacklist
	ImIPBlacklistRelationUser      imIPBlacklistRelationUser
	ImIPWhitelist                  imIPWhitelist
	ImKefuConversation             imKefuConversation
	ImLoginDevice                  imLoginDevice
	ImLoginLog                     imLoginLog
	ImPrivilegeUser                imPrivilegeUser
	ImPrivilegeUserBindLoginDevice imPrivilegeUserBindLoginDevice
	ImPrivilegeUserBindLoginIP     imPrivilegeUserBindLoginIP
	ImPrivilegeUserLog             imPrivilegeUserLog
	ImRegister                     imRegister
	ImRobot                        imRobot
	ImSecurityQuestion             imSecurityQuestion
	ImSensitiveLib                 imSensitiveLib
	ImSensitiveWord                imSensitiveWord
	ImSystemMessage                imSystemMessage
	ImUser                         imUser
	ImUserCode                     imUserCode
	ImUserProhibitedBehavior       imUserProhibitedBehavior
	ImUserSecurityQuestion         imUserSecurityQuestion
	ImUsersDeviceConf              imUsersDeviceConf
	JwtBlacklist                   jwtBlacklist
	LogJob                         logJob
	LogLogin                       logLogin
	LogOper                        logOper
	SysAPI                         sysAPI
	SysDept                        sysDept
	SysDictDatum                   sysDictDatum
	SysDictType                    sysDictType
	SysDiscovery                   sysDiscovery
	SysJob                         sysJob
	SysMenu                        sysMenu
	SysMenuBtn                     sysMenuBtn
	SysPost                        sysPost
	SysRole                        sysRole
	SysRoleBtn                     sysRoleBtn
	SysRoleDept                    sysRoleDept
	SysRoleMenu                    sysRoleMenu
	SysUser                        sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                             db,
		CasbinRule:                     q.CasbinRule.clone(db),
		ImAvatar:                       q.ImAvatar.clone(db),
		ImBlack:                        q.ImBlack.clone(db),
		ImFeedback:                     q.ImFeedback.clone(db),
		ImFriend:                       q.ImFriend.clone(db),
		ImFriendRequest:                q.ImFriendRequest.clone(db),
		ImFunctionalConfig:             q.ImFunctionalConfig.clone(db),
		ImGroup:                        q.ImGroup.clone(db),
		ImGroupMember:                  q.ImGroupMember.clone(db),
		ImGroupRequest:                 q.ImGroupRequest.clone(db),
		ImHandleLog:                    q.ImHandleLog.clone(db),
		ImIPBlacklist:                  q.ImIPBlacklist.clone(db),
		ImIPBlacklistRelationUser:      q.ImIPBlacklistRelationUser.clone(db),
		ImIPWhitelist:                  q.ImIPWhitelist.clone(db),
		ImKefuConversation:             q.ImKefuConversation.clone(db),
		ImLoginDevice:                  q.ImLoginDevice.clone(db),
		ImLoginLog:                     q.ImLoginLog.clone(db),
		ImPrivilegeUser:                q.ImPrivilegeUser.clone(db),
		ImPrivilegeUserBindLoginDevice: q.ImPrivilegeUserBindLoginDevice.clone(db),
		ImPrivilegeUserBindLoginIP:     q.ImPrivilegeUserBindLoginIP.clone(db),
		ImPrivilegeUserLog:             q.ImPrivilegeUserLog.clone(db),
		ImRegister:                     q.ImRegister.clone(db),
		ImRobot:                        q.ImRobot.clone(db),
		ImSecurityQuestion:             q.ImSecurityQuestion.clone(db),
		ImSensitiveLib:                 q.ImSensitiveLib.clone(db),
		ImSensitiveWord:                q.ImSensitiveWord.clone(db),
		ImSystemMessage:                q.ImSystemMessage.clone(db),
		ImUser:                         q.ImUser.clone(db),
		ImUserCode:                     q.ImUserCode.clone(db),
		ImUserProhibitedBehavior:       q.ImUserProhibitedBehavior.clone(db),
		ImUserSecurityQuestion:         q.ImUserSecurityQuestion.clone(db),
		ImUsersDeviceConf:              q.ImUsersDeviceConf.clone(db),
		JwtBlacklist:                   q.JwtBlacklist.clone(db),
		LogJob:                         q.LogJob.clone(db),
		LogLogin:                       q.LogLogin.clone(db),
		LogOper:                        q.LogOper.clone(db),
		SysAPI:                         q.SysAPI.clone(db),
		SysDept:                        q.SysDept.clone(db),
		SysDictDatum:                   q.SysDictDatum.clone(db),
		SysDictType:                    q.SysDictType.clone(db),
		SysDiscovery:                   q.SysDiscovery.clone(db),
		SysJob:                         q.SysJob.clone(db),
		SysMenu:                        q.SysMenu.clone(db),
		SysMenuBtn:                     q.SysMenuBtn.clone(db),
		SysPost:                        q.SysPost.clone(db),
		SysRole:                        q.SysRole.clone(db),
		SysRoleBtn:                     q.SysRoleBtn.clone(db),
		SysRoleDept:                    q.SysRoleDept.clone(db),
		SysRoleMenu:                    q.SysRoleMenu.clone(db),
		SysUser:                        q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                             db,
		CasbinRule:                     q.CasbinRule.replaceDB(db),
		ImAvatar:                       q.ImAvatar.replaceDB(db),
		ImBlack:                        q.ImBlack.replaceDB(db),
		ImFeedback:                     q.ImFeedback.replaceDB(db),
		ImFriend:                       q.ImFriend.replaceDB(db),
		ImFriendRequest:                q.ImFriendRequest.replaceDB(db),
		ImFunctionalConfig:             q.ImFunctionalConfig.replaceDB(db),
		ImGroup:                        q.ImGroup.replaceDB(db),
		ImGroupMember:                  q.ImGroupMember.replaceDB(db),
		ImGroupRequest:                 q.ImGroupRequest.replaceDB(db),
		ImHandleLog:                    q.ImHandleLog.replaceDB(db),
		ImIPBlacklist:                  q.ImIPBlacklist.replaceDB(db),
		ImIPBlacklistRelationUser:      q.ImIPBlacklistRelationUser.replaceDB(db),
		ImIPWhitelist:                  q.ImIPWhitelist.replaceDB(db),
		ImKefuConversation:             q.ImKefuConversation.replaceDB(db),
		ImLoginDevice:                  q.ImLoginDevice.replaceDB(db),
		ImLoginLog:                     q.ImLoginLog.replaceDB(db),
		ImPrivilegeUser:                q.ImPrivilegeUser.replaceDB(db),
		ImPrivilegeUserBindLoginDevice: q.ImPrivilegeUserBindLoginDevice.replaceDB(db),
		ImPrivilegeUserBindLoginIP:     q.ImPrivilegeUserBindLoginIP.replaceDB(db),
		ImPrivilegeUserLog:             q.ImPrivilegeUserLog.replaceDB(db),
		ImRegister:                     q.ImRegister.replaceDB(db),
		ImRobot:                        q.ImRobot.replaceDB(db),
		ImSecurityQuestion:             q.ImSecurityQuestion.replaceDB(db),
		ImSensitiveLib:                 q.ImSensitiveLib.replaceDB(db),
		ImSensitiveWord:                q.ImSensitiveWord.replaceDB(db),
		ImSystemMessage:                q.ImSystemMessage.replaceDB(db),
		ImUser:                         q.ImUser.replaceDB(db),
		ImUserCode:                     q.ImUserCode.replaceDB(db),
		ImUserProhibitedBehavior:       q.ImUserProhibitedBehavior.replaceDB(db),
		ImUserSecurityQuestion:         q.ImUserSecurityQuestion.replaceDB(db),
		ImUsersDeviceConf:              q.ImUsersDeviceConf.replaceDB(db),
		JwtBlacklist:                   q.JwtBlacklist.replaceDB(db),
		LogJob:                         q.LogJob.replaceDB(db),
		LogLogin:                       q.LogLogin.replaceDB(db),
		LogOper:                        q.LogOper.replaceDB(db),
		SysAPI:                         q.SysAPI.replaceDB(db),
		SysDept:                        q.SysDept.replaceDB(db),
		SysDictDatum:                   q.SysDictDatum.replaceDB(db),
		SysDictType:                    q.SysDictType.replaceDB(db),
		SysDiscovery:                   q.SysDiscovery.replaceDB(db),
		SysJob:                         q.SysJob.replaceDB(db),
		SysMenu:                        q.SysMenu.replaceDB(db),
		SysMenuBtn:                     q.SysMenuBtn.replaceDB(db),
		SysPost:                        q.SysPost.replaceDB(db),
		SysRole:                        q.SysRole.replaceDB(db),
		SysRoleBtn:                     q.SysRoleBtn.replaceDB(db),
		SysRoleDept:                    q.SysRoleDept.replaceDB(db),
		SysRoleMenu:                    q.SysRoleMenu.replaceDB(db),
		SysUser:                        q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	CasbinRule                     *casbinRuleDo
	ImAvatar                       *imAvatarDo
	ImBlack                        *imBlackDo
	ImFeedback                     *imFeedbackDo
	ImFriend                       *imFriendDo
	ImFriendRequest                *imFriendRequestDo
	ImFunctionalConfig             *imFunctionalConfigDo
	ImGroup                        *imGroupDo
	ImGroupMember                  *imGroupMemberDo
	ImGroupRequest                 *imGroupRequestDo
	ImHandleLog                    *imHandleLogDo
	ImIPBlacklist                  *imIPBlacklistDo
	ImIPBlacklistRelationUser      *imIPBlacklistRelationUserDo
	ImIPWhitelist                  *imIPWhitelistDo
	ImKefuConversation             *imKefuConversationDo
	ImLoginDevice                  *imLoginDeviceDo
	ImLoginLog                     *imLoginLogDo
	ImPrivilegeUser                *imPrivilegeUserDo
	ImPrivilegeUserBindLoginDevice *imPrivilegeUserBindLoginDeviceDo
	ImPrivilegeUserBindLoginIP     *imPrivilegeUserBindLoginIPDo
	ImPrivilegeUserLog             *imPrivilegeUserLogDo
	ImRegister                     *imRegisterDo
	ImRobot                        *imRobotDo
	ImSecurityQuestion             *imSecurityQuestionDo
	ImSensitiveLib                 *imSensitiveLibDo
	ImSensitiveWord                *imSensitiveWordDo
	ImSystemMessage                *imSystemMessageDo
	ImUser                         *imUserDo
	ImUserCode                     *imUserCodeDo
	ImUserProhibitedBehavior       *imUserProhibitedBehaviorDo
	ImUserSecurityQuestion         *imUserSecurityQuestionDo
	ImUsersDeviceConf              *imUsersDeviceConfDo
	JwtBlacklist                   *jwtBlacklistDo
	LogJob                         *logJobDo
	LogLogin                       *logLoginDo
	LogOper                        *logOperDo
	SysAPI                         *sysAPIDo
	SysDept                        *sysDeptDo
	SysDictDatum                   *sysDictDatumDo
	SysDictType                    *sysDictTypeDo
	SysDiscovery                   *sysDiscoveryDo
	SysJob                         *sysJobDo
	SysMenu                        *sysMenuDo
	SysMenuBtn                     *sysMenuBtnDo
	SysPost                        *sysPostDo
	SysRole                        *sysRoleDo
	SysRoleBtn                     *sysRoleBtnDo
	SysRoleDept                    *sysRoleDeptDo
	SysRoleMenu                    *sysRoleMenuDo
	SysUser                        *sysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CasbinRule:                     q.CasbinRule.WithContext(ctx),
		ImAvatar:                       q.ImAvatar.WithContext(ctx),
		ImBlack:                        q.ImBlack.WithContext(ctx),
		ImFeedback:                     q.ImFeedback.WithContext(ctx),
		ImFriend:                       q.ImFriend.WithContext(ctx),
		ImFriendRequest:                q.ImFriendRequest.WithContext(ctx),
		ImFunctionalConfig:             q.ImFunctionalConfig.WithContext(ctx),
		ImGroup:                        q.ImGroup.WithContext(ctx),
		ImGroupMember:                  q.ImGroupMember.WithContext(ctx),
		ImGroupRequest:                 q.ImGroupRequest.WithContext(ctx),
		ImHandleLog:                    q.ImHandleLog.WithContext(ctx),
		ImIPBlacklist:                  q.ImIPBlacklist.WithContext(ctx),
		ImIPBlacklistRelationUser:      q.ImIPBlacklistRelationUser.WithContext(ctx),
		ImIPWhitelist:                  q.ImIPWhitelist.WithContext(ctx),
		ImKefuConversation:             q.ImKefuConversation.WithContext(ctx),
		ImLoginDevice:                  q.ImLoginDevice.WithContext(ctx),
		ImLoginLog:                     q.ImLoginLog.WithContext(ctx),
		ImPrivilegeUser:                q.ImPrivilegeUser.WithContext(ctx),
		ImPrivilegeUserBindLoginDevice: q.ImPrivilegeUserBindLoginDevice.WithContext(ctx),
		ImPrivilegeUserBindLoginIP:     q.ImPrivilegeUserBindLoginIP.WithContext(ctx),
		ImPrivilegeUserLog:             q.ImPrivilegeUserLog.WithContext(ctx),
		ImRegister:                     q.ImRegister.WithContext(ctx),
		ImRobot:                        q.ImRobot.WithContext(ctx),
		ImSecurityQuestion:             q.ImSecurityQuestion.WithContext(ctx),
		ImSensitiveLib:                 q.ImSensitiveLib.WithContext(ctx),
		ImSensitiveWord:                q.ImSensitiveWord.WithContext(ctx),
		ImSystemMessage:                q.ImSystemMessage.WithContext(ctx),
		ImUser:                         q.ImUser.WithContext(ctx),
		ImUserCode:                     q.ImUserCode.WithContext(ctx),
		ImUserProhibitedBehavior:       q.ImUserProhibitedBehavior.WithContext(ctx),
		ImUserSecurityQuestion:         q.ImUserSecurityQuestion.WithContext(ctx),
		ImUsersDeviceConf:              q.ImUsersDeviceConf.WithContext(ctx),
		JwtBlacklist:                   q.JwtBlacklist.WithContext(ctx),
		LogJob:                         q.LogJob.WithContext(ctx),
		LogLogin:                       q.LogLogin.WithContext(ctx),
		LogOper:                        q.LogOper.WithContext(ctx),
		SysAPI:                         q.SysAPI.WithContext(ctx),
		SysDept:                        q.SysDept.WithContext(ctx),
		SysDictDatum:                   q.SysDictDatum.WithContext(ctx),
		SysDictType:                    q.SysDictType.WithContext(ctx),
		SysDiscovery:                   q.SysDiscovery.WithContext(ctx),
		SysJob:                         q.SysJob.WithContext(ctx),
		SysMenu:                        q.SysMenu.WithContext(ctx),
		SysMenuBtn:                     q.SysMenuBtn.WithContext(ctx),
		SysPost:                        q.SysPost.WithContext(ctx),
		SysRole:                        q.SysRole.WithContext(ctx),
		SysRoleBtn:                     q.SysRoleBtn.WithContext(ctx),
		SysRoleDept:                    q.SysRoleDept.WithContext(ctx),
		SysRoleMenu:                    q.SysRoleMenu.WithContext(ctx),
		SysUser:                        q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
