// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImAvatar(db *gorm.DB, opts ...gen.DOOption) imAvatar {
	_imAvatar := imAvatar{}

	_imAvatar.imAvatarDo.UseDB(db, opts...)
	_imAvatar.imAvatarDo.UseModel(&model.ImAvatar{})

	tableName := _imAvatar.imAvatarDo.TableName()
	_imAvatar.ALL = field.NewAsterisk(tableName)
	_imAvatar.ID = field.NewInt64(tableName, "id")
	_imAvatar.Name = field.NewString(tableName, "name")
	_imAvatar.FaceURL = field.NewString(tableName, "face_url")
	_imAvatar.CreatedAt = field.NewTime(tableName, "created_at")
	_imAvatar.UpdatedAt = field.NewTime(tableName, "updated_at")
	_imAvatar.DeletedAt = field.NewField(tableName, "deleted_at")

	_imAvatar.fillFieldMap()

	return _imAvatar
}

type imAvatar struct {
	imAvatarDo imAvatarDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	Name      field.String // 头像文字
	FaceURL   field.String // 头像
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (i imAvatar) Table(newTableName string) *imAvatar {
	i.imAvatarDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imAvatar) As(alias string) *imAvatar {
	i.imAvatarDo.DO = *(i.imAvatarDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imAvatar) updateTableName(table string) *imAvatar {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.Name = field.NewString(table, "name")
	i.FaceURL = field.NewString(table, "face_url")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")

	i.fillFieldMap()

	return i
}

func (i *imAvatar) WithContext(ctx context.Context) *imAvatarDo { return i.imAvatarDo.WithContext(ctx) }

func (i imAvatar) TableName() string { return i.imAvatarDo.TableName() }

func (i imAvatar) Alias() string { return i.imAvatarDo.Alias() }

func (i *imAvatar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imAvatar) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name"] = i.Name
	i.fieldMap["face_url"] = i.FaceURL
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
}

func (i imAvatar) clone(db *gorm.DB) imAvatar {
	i.imAvatarDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imAvatar) replaceDB(db *gorm.DB) imAvatar {
	i.imAvatarDo.ReplaceDB(db)
	return i
}

type imAvatarDo struct{ gen.DO }

func (i imAvatarDo) Debug() *imAvatarDo {
	return i.withDO(i.DO.Debug())
}

func (i imAvatarDo) WithContext(ctx context.Context) *imAvatarDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imAvatarDo) ReadDB() *imAvatarDo {
	return i.Clauses(dbresolver.Read)
}

func (i imAvatarDo) WriteDB() *imAvatarDo {
	return i.Clauses(dbresolver.Write)
}

func (i imAvatarDo) Session(config *gorm.Session) *imAvatarDo {
	return i.withDO(i.DO.Session(config))
}

func (i imAvatarDo) Clauses(conds ...clause.Expression) *imAvatarDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imAvatarDo) Returning(value interface{}, columns ...string) *imAvatarDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imAvatarDo) Not(conds ...gen.Condition) *imAvatarDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imAvatarDo) Or(conds ...gen.Condition) *imAvatarDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imAvatarDo) Select(conds ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imAvatarDo) Where(conds ...gen.Condition) *imAvatarDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imAvatarDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imAvatarDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imAvatarDo) Order(conds ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imAvatarDo) Distinct(cols ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imAvatarDo) Omit(cols ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imAvatarDo) Join(table schema.Tabler, on ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imAvatarDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imAvatarDo) RightJoin(table schema.Tabler, on ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imAvatarDo) Group(cols ...field.Expr) *imAvatarDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imAvatarDo) Having(conds ...gen.Condition) *imAvatarDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imAvatarDo) Limit(limit int) *imAvatarDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imAvatarDo) Offset(offset int) *imAvatarDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imAvatarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imAvatarDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imAvatarDo) Unscoped() *imAvatarDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imAvatarDo) Create(values ...*model.ImAvatar) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imAvatarDo) CreateInBatches(values []*model.ImAvatar, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imAvatarDo) Save(values ...*model.ImAvatar) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imAvatarDo) First() (*model.ImAvatar, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImAvatar), nil
	}
}

func (i imAvatarDo) Take() (*model.ImAvatar, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImAvatar), nil
	}
}

func (i imAvatarDo) Last() (*model.ImAvatar, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImAvatar), nil
	}
}

func (i imAvatarDo) Find() ([]*model.ImAvatar, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImAvatar), err
}

func (i imAvatarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImAvatar, err error) {
	buf := make([]*model.ImAvatar, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imAvatarDo) FindInBatches(result *[]*model.ImAvatar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imAvatarDo) Attrs(attrs ...field.AssignExpr) *imAvatarDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imAvatarDo) Assign(attrs ...field.AssignExpr) *imAvatarDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imAvatarDo) Joins(fields ...field.RelationField) *imAvatarDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imAvatarDo) Preload(fields ...field.RelationField) *imAvatarDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imAvatarDo) FirstOrInit() (*model.ImAvatar, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImAvatar), nil
	}
}

func (i imAvatarDo) FirstOrCreate() (*model.ImAvatar, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImAvatar), nil
	}
}

func (i imAvatarDo) FindByPage(offset int, limit int) (result []*model.ImAvatar, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imAvatarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imAvatarDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imAvatarDo) Delete(models ...*model.ImAvatar) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imAvatarDo) withDO(do gen.Dao) *imAvatarDo {
	i.DO = *do.(*gen.DO)
	return i
}
