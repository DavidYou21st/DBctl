// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImBlack(db *gorm.DB, opts ...gen.DOOption) imBlack {
	_imBlack := imBlack{}

	_imBlack.imBlackDo.UseDB(db, opts...)
	_imBlack.imBlackDo.UseModel(&model.ImBlack{})

	tableName := _imBlack.imBlackDo.TableName()
	_imBlack.ALL = field.NewAsterisk(tableName)
	_imBlack.OwnerUserID = field.NewString(tableName, "owner_user_id")
	_imBlack.BlockUserID = field.NewString(tableName, "block_user_id")
	_imBlack.CreateTime = field.NewTime(tableName, "create_time")
	_imBlack.AddSource = field.NewInt32(tableName, "add_source")
	_imBlack.OperatorUserID = field.NewString(tableName, "operator_user_id")
	_imBlack.Ex = field.NewString(tableName, "ex")

	_imBlack.fillFieldMap()

	return _imBlack
}

type imBlack struct {
	imBlackDo imBlackDo

	ALL            field.Asterisk
	OwnerUserID    field.String // 用户的UserID
	BlockUserID    field.String // 被拉黑用户的UserID
	CreateTime     field.Time   // 添加时间
	AddSource      field.Int32  // 原因
	OperatorUserID field.String // 处理者的UserID
	Ex             field.String // 拓展字段

	fieldMap map[string]field.Expr
}

func (i imBlack) Table(newTableName string) *imBlack {
	i.imBlackDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imBlack) As(alias string) *imBlack {
	i.imBlackDo.DO = *(i.imBlackDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imBlack) updateTableName(table string) *imBlack {
	i.ALL = field.NewAsterisk(table)
	i.OwnerUserID = field.NewString(table, "owner_user_id")
	i.BlockUserID = field.NewString(table, "block_user_id")
	i.CreateTime = field.NewTime(table, "create_time")
	i.AddSource = field.NewInt32(table, "add_source")
	i.OperatorUserID = field.NewString(table, "operator_user_id")
	i.Ex = field.NewString(table, "ex")

	i.fillFieldMap()

	return i
}

func (i *imBlack) WithContext(ctx context.Context) *imBlackDo { return i.imBlackDo.WithContext(ctx) }

func (i imBlack) TableName() string { return i.imBlackDo.TableName() }

func (i imBlack) Alias() string { return i.imBlackDo.Alias() }

func (i *imBlack) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imBlack) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["owner_user_id"] = i.OwnerUserID
	i.fieldMap["block_user_id"] = i.BlockUserID
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["add_source"] = i.AddSource
	i.fieldMap["operator_user_id"] = i.OperatorUserID
	i.fieldMap["ex"] = i.Ex
}

func (i imBlack) clone(db *gorm.DB) imBlack {
	i.imBlackDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imBlack) replaceDB(db *gorm.DB) imBlack {
	i.imBlackDo.ReplaceDB(db)
	return i
}

type imBlackDo struct{ gen.DO }

func (i imBlackDo) Debug() *imBlackDo {
	return i.withDO(i.DO.Debug())
}

func (i imBlackDo) WithContext(ctx context.Context) *imBlackDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imBlackDo) ReadDB() *imBlackDo {
	return i.Clauses(dbresolver.Read)
}

func (i imBlackDo) WriteDB() *imBlackDo {
	return i.Clauses(dbresolver.Write)
}

func (i imBlackDo) Session(config *gorm.Session) *imBlackDo {
	return i.withDO(i.DO.Session(config))
}

func (i imBlackDo) Clauses(conds ...clause.Expression) *imBlackDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imBlackDo) Returning(value interface{}, columns ...string) *imBlackDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imBlackDo) Not(conds ...gen.Condition) *imBlackDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imBlackDo) Or(conds ...gen.Condition) *imBlackDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imBlackDo) Select(conds ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imBlackDo) Where(conds ...gen.Condition) *imBlackDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imBlackDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imBlackDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imBlackDo) Order(conds ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imBlackDo) Distinct(cols ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imBlackDo) Omit(cols ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imBlackDo) Join(table schema.Tabler, on ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imBlackDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imBlackDo) RightJoin(table schema.Tabler, on ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imBlackDo) Group(cols ...field.Expr) *imBlackDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imBlackDo) Having(conds ...gen.Condition) *imBlackDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imBlackDo) Limit(limit int) *imBlackDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imBlackDo) Offset(offset int) *imBlackDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imBlackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imBlackDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imBlackDo) Unscoped() *imBlackDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imBlackDo) Create(values ...*model.ImBlack) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imBlackDo) CreateInBatches(values []*model.ImBlack, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imBlackDo) Save(values ...*model.ImBlack) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imBlackDo) First() (*model.ImBlack, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImBlack), nil
	}
}

func (i imBlackDo) Take() (*model.ImBlack, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImBlack), nil
	}
}

func (i imBlackDo) Last() (*model.ImBlack, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImBlack), nil
	}
}

func (i imBlackDo) Find() ([]*model.ImBlack, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImBlack), err
}

func (i imBlackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImBlack, err error) {
	buf := make([]*model.ImBlack, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imBlackDo) FindInBatches(result *[]*model.ImBlack, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imBlackDo) Attrs(attrs ...field.AssignExpr) *imBlackDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imBlackDo) Assign(attrs ...field.AssignExpr) *imBlackDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imBlackDo) Joins(fields ...field.RelationField) *imBlackDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imBlackDo) Preload(fields ...field.RelationField) *imBlackDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imBlackDo) FirstOrInit() (*model.ImBlack, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImBlack), nil
	}
}

func (i imBlackDo) FirstOrCreate() (*model.ImBlack, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImBlack), nil
	}
}

func (i imBlackDo) FindByPage(offset int, limit int) (result []*model.ImBlack, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imBlackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imBlackDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imBlackDo) Delete(models ...*model.ImBlack) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imBlackDo) withDO(do gen.Dao) *imBlackDo {
	i.DO = *do.(*gen.DO)
	return i
}
