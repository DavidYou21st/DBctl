// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImFriendRequest(db *gorm.DB, opts ...gen.DOOption) imFriendRequest {
	_imFriendRequest := imFriendRequest{}

	_imFriendRequest.imFriendRequestDo.UseDB(db, opts...)
	_imFriendRequest.imFriendRequestDo.UseModel(&model.ImFriendRequest{})

	tableName := _imFriendRequest.imFriendRequestDo.TableName()
	_imFriendRequest.ALL = field.NewAsterisk(tableName)
	_imFriendRequest.FromUserID = field.NewString(tableName, "from_user_id")
	_imFriendRequest.ToUserID = field.NewString(tableName, "to_user_id")
	_imFriendRequest.HandleResult = field.NewInt32(tableName, "handle_result")
	_imFriendRequest.ReqMsg = field.NewString(tableName, "req_msg")
	_imFriendRequest.CreateTime = field.NewTime(tableName, "create_time")
	_imFriendRequest.HandlerUserID = field.NewString(tableName, "handler_user_id")
	_imFriendRequest.HandleMsg = field.NewString(tableName, "handle_msg")
	_imFriendRequest.HandleTime = field.NewTime(tableName, "handle_time")
	_imFriendRequest.Ex = field.NewString(tableName, "ex")
	_imFriendRequest.ComeFrom = field.NewInt32(tableName, "come_from")

	_imFriendRequest.fillFieldMap()

	return _imFriendRequest
}

type imFriendRequest struct {
	imFriendRequestDo imFriendRequestDo

	ALL           field.Asterisk
	FromUserID    field.String // 申请者 UserID
	ToUserID      field.String // 被申请者 UserID
	HandleResult  field.Int32  // 处理结果
	ReqMsg        field.String // 处理结果
	CreateTime    field.Time   // 申请时间
	HandlerUserID field.String // 处理者的UserID
	HandleMsg     field.String // 处理信息
	HandleTime    field.Time   // 处理时间
	Ex            field.String // 拓展字段
	ComeFrom      field.Int32  // 来源，1-ID,2-扫码,3-名片，4-群聊，5-其他

	fieldMap map[string]field.Expr
}

func (i imFriendRequest) Table(newTableName string) *imFriendRequest {
	i.imFriendRequestDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imFriendRequest) As(alias string) *imFriendRequest {
	i.imFriendRequestDo.DO = *(i.imFriendRequestDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imFriendRequest) updateTableName(table string) *imFriendRequest {
	i.ALL = field.NewAsterisk(table)
	i.FromUserID = field.NewString(table, "from_user_id")
	i.ToUserID = field.NewString(table, "to_user_id")
	i.HandleResult = field.NewInt32(table, "handle_result")
	i.ReqMsg = field.NewString(table, "req_msg")
	i.CreateTime = field.NewTime(table, "create_time")
	i.HandlerUserID = field.NewString(table, "handler_user_id")
	i.HandleMsg = field.NewString(table, "handle_msg")
	i.HandleTime = field.NewTime(table, "handle_time")
	i.Ex = field.NewString(table, "ex")
	i.ComeFrom = field.NewInt32(table, "come_from")

	i.fillFieldMap()

	return i
}

func (i *imFriendRequest) WithContext(ctx context.Context) *imFriendRequestDo {
	return i.imFriendRequestDo.WithContext(ctx)
}

func (i imFriendRequest) TableName() string { return i.imFriendRequestDo.TableName() }

func (i imFriendRequest) Alias() string { return i.imFriendRequestDo.Alias() }

func (i *imFriendRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imFriendRequest) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 10)
	i.fieldMap["from_user_id"] = i.FromUserID
	i.fieldMap["to_user_id"] = i.ToUserID
	i.fieldMap["handle_result"] = i.HandleResult
	i.fieldMap["req_msg"] = i.ReqMsg
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["handler_user_id"] = i.HandlerUserID
	i.fieldMap["handle_msg"] = i.HandleMsg
	i.fieldMap["handle_time"] = i.HandleTime
	i.fieldMap["ex"] = i.Ex
	i.fieldMap["come_from"] = i.ComeFrom
}

func (i imFriendRequest) clone(db *gorm.DB) imFriendRequest {
	i.imFriendRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imFriendRequest) replaceDB(db *gorm.DB) imFriendRequest {
	i.imFriendRequestDo.ReplaceDB(db)
	return i
}

type imFriendRequestDo struct{ gen.DO }

func (i imFriendRequestDo) Debug() *imFriendRequestDo {
	return i.withDO(i.DO.Debug())
}

func (i imFriendRequestDo) WithContext(ctx context.Context) *imFriendRequestDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imFriendRequestDo) ReadDB() *imFriendRequestDo {
	return i.Clauses(dbresolver.Read)
}

func (i imFriendRequestDo) WriteDB() *imFriendRequestDo {
	return i.Clauses(dbresolver.Write)
}

func (i imFriendRequestDo) Session(config *gorm.Session) *imFriendRequestDo {
	return i.withDO(i.DO.Session(config))
}

func (i imFriendRequestDo) Clauses(conds ...clause.Expression) *imFriendRequestDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imFriendRequestDo) Returning(value interface{}, columns ...string) *imFriendRequestDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imFriendRequestDo) Not(conds ...gen.Condition) *imFriendRequestDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imFriendRequestDo) Or(conds ...gen.Condition) *imFriendRequestDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imFriendRequestDo) Select(conds ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imFriendRequestDo) Where(conds ...gen.Condition) *imFriendRequestDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imFriendRequestDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imFriendRequestDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imFriendRequestDo) Order(conds ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imFriendRequestDo) Distinct(cols ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imFriendRequestDo) Omit(cols ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imFriendRequestDo) Join(table schema.Tabler, on ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imFriendRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imFriendRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imFriendRequestDo) Group(cols ...field.Expr) *imFriendRequestDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imFriendRequestDo) Having(conds ...gen.Condition) *imFriendRequestDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imFriendRequestDo) Limit(limit int) *imFriendRequestDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imFriendRequestDo) Offset(offset int) *imFriendRequestDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imFriendRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imFriendRequestDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imFriendRequestDo) Unscoped() *imFriendRequestDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imFriendRequestDo) Create(values ...*model.ImFriendRequest) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imFriendRequestDo) CreateInBatches(values []*model.ImFriendRequest, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imFriendRequestDo) Save(values ...*model.ImFriendRequest) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imFriendRequestDo) First() (*model.ImFriendRequest, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImFriendRequest), nil
	}
}

func (i imFriendRequestDo) Take() (*model.ImFriendRequest, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImFriendRequest), nil
	}
}

func (i imFriendRequestDo) Last() (*model.ImFriendRequest, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImFriendRequest), nil
	}
}

func (i imFriendRequestDo) Find() ([]*model.ImFriendRequest, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImFriendRequest), err
}

func (i imFriendRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImFriendRequest, err error) {
	buf := make([]*model.ImFriendRequest, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imFriendRequestDo) FindInBatches(result *[]*model.ImFriendRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imFriendRequestDo) Attrs(attrs ...field.AssignExpr) *imFriendRequestDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imFriendRequestDo) Assign(attrs ...field.AssignExpr) *imFriendRequestDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imFriendRequestDo) Joins(fields ...field.RelationField) *imFriendRequestDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imFriendRequestDo) Preload(fields ...field.RelationField) *imFriendRequestDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imFriendRequestDo) FirstOrInit() (*model.ImFriendRequest, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImFriendRequest), nil
	}
}

func (i imFriendRequestDo) FirstOrCreate() (*model.ImFriendRequest, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImFriendRequest), nil
	}
}

func (i imFriendRequestDo) FindByPage(offset int, limit int) (result []*model.ImFriendRequest, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imFriendRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imFriendRequestDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imFriendRequestDo) Delete(models ...*model.ImFriendRequest) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imFriendRequestDo) withDO(do gen.Dao) *imFriendRequestDo {
	i.DO = *do.(*gen.DO)
	return i
}
