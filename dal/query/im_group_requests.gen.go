// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImGroupRequest(db *gorm.DB, opts ...gen.DOOption) imGroupRequest {
	_imGroupRequest := imGroupRequest{}

	_imGroupRequest.imGroupRequestDo.UseDB(db, opts...)
	_imGroupRequest.imGroupRequestDo.UseModel(&model.ImGroupRequest{})

	tableName := _imGroupRequest.imGroupRequestDo.TableName()
	_imGroupRequest.ALL = field.NewAsterisk(tableName)
	_imGroupRequest.UserID = field.NewString(tableName, "user_id")
	_imGroupRequest.GroupID = field.NewString(tableName, "group_id")
	_imGroupRequest.HandleResult = field.NewInt32(tableName, "handle_result")
	_imGroupRequest.ReqMsg = field.NewString(tableName, "req_msg")
	_imGroupRequest.HandleMsg = field.NewString(tableName, "handle_msg")
	_imGroupRequest.ReqTime = field.NewTime(tableName, "req_time")
	_imGroupRequest.HandleUserID = field.NewString(tableName, "handle_user_id")
	_imGroupRequest.HandleTime = field.NewTime(tableName, "handle_time")
	_imGroupRequest.JoinSource = field.NewInt32(tableName, "join_source")
	_imGroupRequest.InviterUserID = field.NewString(tableName, "inviter_user_id")
	_imGroupRequest.Ex = field.NewString(tableName, "ex")

	_imGroupRequest.fillFieldMap()

	return _imGroupRequest
}

type imGroupRequest struct {
	imGroupRequestDo imGroupRequestDo

	ALL           field.Asterisk
	UserID        field.String // 进群申请者 userID
	GroupID       field.String // 群组ID
	HandleResult  field.Int32  // 处理结果
	ReqMsg        field.String // 申请信息
	HandleMsg     field.String // 处理信息
	ReqTime       field.Time   // 申请时间
	HandleUserID  field.String // 处理者的用户ID
	HandleTime    field.Time   // 处理时间
	JoinSource    field.Int32  // 来源
	InviterUserID field.String // 邀请者的用户ID
	Ex            field.String

	fieldMap map[string]field.Expr
}

func (i imGroupRequest) Table(newTableName string) *imGroupRequest {
	i.imGroupRequestDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imGroupRequest) As(alias string) *imGroupRequest {
	i.imGroupRequestDo.DO = *(i.imGroupRequestDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imGroupRequest) updateTableName(table string) *imGroupRequest {
	i.ALL = field.NewAsterisk(table)
	i.UserID = field.NewString(table, "user_id")
	i.GroupID = field.NewString(table, "group_id")
	i.HandleResult = field.NewInt32(table, "handle_result")
	i.ReqMsg = field.NewString(table, "req_msg")
	i.HandleMsg = field.NewString(table, "handle_msg")
	i.ReqTime = field.NewTime(table, "req_time")
	i.HandleUserID = field.NewString(table, "handle_user_id")
	i.HandleTime = field.NewTime(table, "handle_time")
	i.JoinSource = field.NewInt32(table, "join_source")
	i.InviterUserID = field.NewString(table, "inviter_user_id")
	i.Ex = field.NewString(table, "ex")

	i.fillFieldMap()

	return i
}

func (i *imGroupRequest) WithContext(ctx context.Context) *imGroupRequestDo {
	return i.imGroupRequestDo.WithContext(ctx)
}

func (i imGroupRequest) TableName() string { return i.imGroupRequestDo.TableName() }

func (i imGroupRequest) Alias() string { return i.imGroupRequestDo.Alias() }

func (i *imGroupRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imGroupRequest) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["group_id"] = i.GroupID
	i.fieldMap["handle_result"] = i.HandleResult
	i.fieldMap["req_msg"] = i.ReqMsg
	i.fieldMap["handle_msg"] = i.HandleMsg
	i.fieldMap["req_time"] = i.ReqTime
	i.fieldMap["handle_user_id"] = i.HandleUserID
	i.fieldMap["handle_time"] = i.HandleTime
	i.fieldMap["join_source"] = i.JoinSource
	i.fieldMap["inviter_user_id"] = i.InviterUserID
	i.fieldMap["ex"] = i.Ex
}

func (i imGroupRequest) clone(db *gorm.DB) imGroupRequest {
	i.imGroupRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imGroupRequest) replaceDB(db *gorm.DB) imGroupRequest {
	i.imGroupRequestDo.ReplaceDB(db)
	return i
}

type imGroupRequestDo struct{ gen.DO }

func (i imGroupRequestDo) Debug() *imGroupRequestDo {
	return i.withDO(i.DO.Debug())
}

func (i imGroupRequestDo) WithContext(ctx context.Context) *imGroupRequestDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imGroupRequestDo) ReadDB() *imGroupRequestDo {
	return i.Clauses(dbresolver.Read)
}

func (i imGroupRequestDo) WriteDB() *imGroupRequestDo {
	return i.Clauses(dbresolver.Write)
}

func (i imGroupRequestDo) Session(config *gorm.Session) *imGroupRequestDo {
	return i.withDO(i.DO.Session(config))
}

func (i imGroupRequestDo) Clauses(conds ...clause.Expression) *imGroupRequestDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imGroupRequestDo) Returning(value interface{}, columns ...string) *imGroupRequestDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imGroupRequestDo) Not(conds ...gen.Condition) *imGroupRequestDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imGroupRequestDo) Or(conds ...gen.Condition) *imGroupRequestDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imGroupRequestDo) Select(conds ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imGroupRequestDo) Where(conds ...gen.Condition) *imGroupRequestDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imGroupRequestDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imGroupRequestDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imGroupRequestDo) Order(conds ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imGroupRequestDo) Distinct(cols ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imGroupRequestDo) Omit(cols ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imGroupRequestDo) Join(table schema.Tabler, on ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imGroupRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imGroupRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imGroupRequestDo) Group(cols ...field.Expr) *imGroupRequestDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imGroupRequestDo) Having(conds ...gen.Condition) *imGroupRequestDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imGroupRequestDo) Limit(limit int) *imGroupRequestDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imGroupRequestDo) Offset(offset int) *imGroupRequestDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imGroupRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imGroupRequestDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imGroupRequestDo) Unscoped() *imGroupRequestDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imGroupRequestDo) Create(values ...*model.ImGroupRequest) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imGroupRequestDo) CreateInBatches(values []*model.ImGroupRequest, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imGroupRequestDo) Save(values ...*model.ImGroupRequest) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imGroupRequestDo) First() (*model.ImGroupRequest, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroupRequest), nil
	}
}

func (i imGroupRequestDo) Take() (*model.ImGroupRequest, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroupRequest), nil
	}
}

func (i imGroupRequestDo) Last() (*model.ImGroupRequest, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroupRequest), nil
	}
}

func (i imGroupRequestDo) Find() ([]*model.ImGroupRequest, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImGroupRequest), err
}

func (i imGroupRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImGroupRequest, err error) {
	buf := make([]*model.ImGroupRequest, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imGroupRequestDo) FindInBatches(result *[]*model.ImGroupRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imGroupRequestDo) Attrs(attrs ...field.AssignExpr) *imGroupRequestDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imGroupRequestDo) Assign(attrs ...field.AssignExpr) *imGroupRequestDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imGroupRequestDo) Joins(fields ...field.RelationField) *imGroupRequestDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imGroupRequestDo) Preload(fields ...field.RelationField) *imGroupRequestDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imGroupRequestDo) FirstOrInit() (*model.ImGroupRequest, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroupRequest), nil
	}
}

func (i imGroupRequestDo) FirstOrCreate() (*model.ImGroupRequest, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroupRequest), nil
	}
}

func (i imGroupRequestDo) FindByPage(offset int, limit int) (result []*model.ImGroupRequest, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imGroupRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imGroupRequestDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imGroupRequestDo) Delete(models ...*model.ImGroupRequest) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imGroupRequestDo) withDO(do gen.Dao) *imGroupRequestDo {
	i.DO = *do.(*gen.DO)
	return i
}
