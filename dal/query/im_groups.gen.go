// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImGroup(db *gorm.DB, opts ...gen.DOOption) imGroup {
	_imGroup := imGroup{}

	_imGroup.imGroupDo.UseDB(db, opts...)
	_imGroup.imGroupDo.UseModel(&model.ImGroup{})

	tableName := _imGroup.imGroupDo.TableName()
	_imGroup.ALL = field.NewAsterisk(tableName)
	_imGroup.GroupID = field.NewString(tableName, "group_id")
	_imGroup.Name = field.NewString(tableName, "name")
	_imGroup.Notification = field.NewString(tableName, "notification")
	_imGroup.Introduction = field.NewString(tableName, "introduction")
	_imGroup.FaceURL = field.NewString(tableName, "face_url")
	_imGroup.CreateTime = field.NewTime(tableName, "create_time")
	_imGroup.BanReason = field.NewString(tableName, "ban_reason")
	_imGroup.BanTime = field.NewTime(tableName, "ban_time")
	_imGroup.Ex = field.NewString(tableName, "ex")
	_imGroup.Status = field.NewInt32(tableName, "status")
	_imGroup.GroupType = field.NewInt32(tableName, "group_type")
	_imGroup.GroupLeaderID = field.NewString(tableName, "group_leader_id")
	_imGroup.WelcomeMessage = field.NewString(tableName, "welcome_message")
	_imGroup.RobotNum = field.NewInt32(tableName, "robot_num")
	_imGroup.AddFriend = field.NewInt32(tableName, "add_friend")

	_imGroup.fillFieldMap()

	return _imGroup
}

type imGroup struct {
	imGroupDo imGroupDo

	ALL            field.Asterisk
	GroupID        field.String // 群ID
	Name           field.String // 群名称
	Notification   field.String // 群通知
	Introduction   field.String // 群简介
	FaceURL        field.String // 群头像
	CreateTime     field.Time   // 创建时间
	BanReason      field.String // 封禁理由
	BanTime        field.Time   // 封禁时间
	Ex             field.String
	Status         field.Int32  // 状态 1-正常，2-群禁言，3-群封禁
	GroupType      field.Int32  // 群类型
	GroupLeaderID  field.String // 群主id
	WelcomeMessage field.String // 欢迎语
	RobotNum       field.Int32  // 虚拟成员数量
	AddFriend      field.Int32  // 是否允许群成员互加好友 1-正常，2-禁止

	fieldMap map[string]field.Expr
}

func (i imGroup) Table(newTableName string) *imGroup {
	i.imGroupDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imGroup) As(alias string) *imGroup {
	i.imGroupDo.DO = *(i.imGroupDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imGroup) updateTableName(table string) *imGroup {
	i.ALL = field.NewAsterisk(table)
	i.GroupID = field.NewString(table, "group_id")
	i.Name = field.NewString(table, "name")
	i.Notification = field.NewString(table, "notification")
	i.Introduction = field.NewString(table, "introduction")
	i.FaceURL = field.NewString(table, "face_url")
	i.CreateTime = field.NewTime(table, "create_time")
	i.BanReason = field.NewString(table, "ban_reason")
	i.BanTime = field.NewTime(table, "ban_time")
	i.Ex = field.NewString(table, "ex")
	i.Status = field.NewInt32(table, "status")
	i.GroupType = field.NewInt32(table, "group_type")
	i.GroupLeaderID = field.NewString(table, "group_leader_id")
	i.WelcomeMessage = field.NewString(table, "welcome_message")
	i.RobotNum = field.NewInt32(table, "robot_num")
	i.AddFriend = field.NewInt32(table, "add_friend")

	i.fillFieldMap()

	return i
}

func (i *imGroup) WithContext(ctx context.Context) *imGroupDo { return i.imGroupDo.WithContext(ctx) }

func (i imGroup) TableName() string { return i.imGroupDo.TableName() }

func (i imGroup) Alias() string { return i.imGroupDo.Alias() }

func (i *imGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imGroup) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 15)
	i.fieldMap["group_id"] = i.GroupID
	i.fieldMap["name"] = i.Name
	i.fieldMap["notification"] = i.Notification
	i.fieldMap["introduction"] = i.Introduction
	i.fieldMap["face_url"] = i.FaceURL
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["ban_reason"] = i.BanReason
	i.fieldMap["ban_time"] = i.BanTime
	i.fieldMap["ex"] = i.Ex
	i.fieldMap["status"] = i.Status
	i.fieldMap["group_type"] = i.GroupType
	i.fieldMap["group_leader_id"] = i.GroupLeaderID
	i.fieldMap["welcome_message"] = i.WelcomeMessage
	i.fieldMap["robot_num"] = i.RobotNum
	i.fieldMap["add_friend"] = i.AddFriend
}

func (i imGroup) clone(db *gorm.DB) imGroup {
	i.imGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imGroup) replaceDB(db *gorm.DB) imGroup {
	i.imGroupDo.ReplaceDB(db)
	return i
}

type imGroupDo struct{ gen.DO }

func (i imGroupDo) Debug() *imGroupDo {
	return i.withDO(i.DO.Debug())
}

func (i imGroupDo) WithContext(ctx context.Context) *imGroupDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imGroupDo) ReadDB() *imGroupDo {
	return i.Clauses(dbresolver.Read)
}

func (i imGroupDo) WriteDB() *imGroupDo {
	return i.Clauses(dbresolver.Write)
}

func (i imGroupDo) Session(config *gorm.Session) *imGroupDo {
	return i.withDO(i.DO.Session(config))
}

func (i imGroupDo) Clauses(conds ...clause.Expression) *imGroupDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imGroupDo) Returning(value interface{}, columns ...string) *imGroupDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imGroupDo) Not(conds ...gen.Condition) *imGroupDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imGroupDo) Or(conds ...gen.Condition) *imGroupDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imGroupDo) Select(conds ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imGroupDo) Where(conds ...gen.Condition) *imGroupDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imGroupDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imGroupDo) Order(conds ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imGroupDo) Distinct(cols ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imGroupDo) Omit(cols ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imGroupDo) Join(table schema.Tabler, on ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imGroupDo) Group(cols ...field.Expr) *imGroupDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imGroupDo) Having(conds ...gen.Condition) *imGroupDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imGroupDo) Limit(limit int) *imGroupDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imGroupDo) Offset(offset int) *imGroupDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imGroupDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imGroupDo) Unscoped() *imGroupDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imGroupDo) Create(values ...*model.ImGroup) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imGroupDo) CreateInBatches(values []*model.ImGroup, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imGroupDo) Save(values ...*model.ImGroup) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imGroupDo) First() (*model.ImGroup, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroup), nil
	}
}

func (i imGroupDo) Take() (*model.ImGroup, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroup), nil
	}
}

func (i imGroupDo) Last() (*model.ImGroup, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroup), nil
	}
}

func (i imGroupDo) Find() ([]*model.ImGroup, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImGroup), err
}

func (i imGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImGroup, err error) {
	buf := make([]*model.ImGroup, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imGroupDo) FindInBatches(result *[]*model.ImGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imGroupDo) Attrs(attrs ...field.AssignExpr) *imGroupDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imGroupDo) Assign(attrs ...field.AssignExpr) *imGroupDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imGroupDo) Joins(fields ...field.RelationField) *imGroupDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imGroupDo) Preload(fields ...field.RelationField) *imGroupDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imGroupDo) FirstOrInit() (*model.ImGroup, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroup), nil
	}
}

func (i imGroupDo) FirstOrCreate() (*model.ImGroup, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImGroup), nil
	}
}

func (i imGroupDo) FindByPage(offset int, limit int) (result []*model.ImGroup, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imGroupDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imGroupDo) Delete(models ...*model.ImGroup) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imGroupDo) withDO(do gen.Dao) *imGroupDo {
	i.DO = *do.(*gen.DO)
	return i
}
