// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImHandleLog(db *gorm.DB, opts ...gen.DOOption) imHandleLog {
	_imHandleLog := imHandleLog{}

	_imHandleLog.imHandleLogDo.UseDB(db, opts...)
	_imHandleLog.imHandleLogDo.UseModel(&model.ImHandleLog{})

	tableName := _imHandleLog.imHandleLogDo.TableName()
	_imHandleLog.ALL = field.NewAsterisk(tableName)
	_imHandleLog.ID = field.NewInt64(tableName, "id")
	_imHandleLog.Account = field.NewString(tableName, "account")
	_imHandleLog.Nickname = field.NewString(tableName, "nickname")
	_imHandleLog.HandleType = field.NewString(tableName, "handle_type")
	_imHandleLog.HandleDesc = field.NewString(tableName, "handle_desc")
	_imHandleLog.RequstBody = field.NewString(tableName, "requst_body")
	_imHandleLog.CreatedAt = field.NewTime(tableName, "created_at")
	_imHandleLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_imHandleLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_imHandleLog.fillFieldMap()

	return _imHandleLog
}

type imHandleLog struct {
	imHandleLogDo imHandleLogDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键id
	Account    field.String // 账号
	Nickname   field.String // 账号昵称
	HandleType field.String // 操作类型
	HandleDesc field.String // 操作描叙
	RequstBody field.String // 请求参数
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (i imHandleLog) Table(newTableName string) *imHandleLog {
	i.imHandleLogDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imHandleLog) As(alias string) *imHandleLog {
	i.imHandleLogDo.DO = *(i.imHandleLogDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imHandleLog) updateTableName(table string) *imHandleLog {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.Account = field.NewString(table, "account")
	i.Nickname = field.NewString(table, "nickname")
	i.HandleType = field.NewString(table, "handle_type")
	i.HandleDesc = field.NewString(table, "handle_desc")
	i.RequstBody = field.NewString(table, "requst_body")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")

	i.fillFieldMap()

	return i
}

func (i *imHandleLog) WithContext(ctx context.Context) *imHandleLogDo {
	return i.imHandleLogDo.WithContext(ctx)
}

func (i imHandleLog) TableName() string { return i.imHandleLogDo.TableName() }

func (i imHandleLog) Alias() string { return i.imHandleLogDo.Alias() }

func (i *imHandleLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imHandleLog) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["id"] = i.ID
	i.fieldMap["account"] = i.Account
	i.fieldMap["nickname"] = i.Nickname
	i.fieldMap["handle_type"] = i.HandleType
	i.fieldMap["handle_desc"] = i.HandleDesc
	i.fieldMap["requst_body"] = i.RequstBody
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
}

func (i imHandleLog) clone(db *gorm.DB) imHandleLog {
	i.imHandleLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imHandleLog) replaceDB(db *gorm.DB) imHandleLog {
	i.imHandleLogDo.ReplaceDB(db)
	return i
}

type imHandleLogDo struct{ gen.DO }

func (i imHandleLogDo) Debug() *imHandleLogDo {
	return i.withDO(i.DO.Debug())
}

func (i imHandleLogDo) WithContext(ctx context.Context) *imHandleLogDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imHandleLogDo) ReadDB() *imHandleLogDo {
	return i.Clauses(dbresolver.Read)
}

func (i imHandleLogDo) WriteDB() *imHandleLogDo {
	return i.Clauses(dbresolver.Write)
}

func (i imHandleLogDo) Session(config *gorm.Session) *imHandleLogDo {
	return i.withDO(i.DO.Session(config))
}

func (i imHandleLogDo) Clauses(conds ...clause.Expression) *imHandleLogDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imHandleLogDo) Returning(value interface{}, columns ...string) *imHandleLogDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imHandleLogDo) Not(conds ...gen.Condition) *imHandleLogDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imHandleLogDo) Or(conds ...gen.Condition) *imHandleLogDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imHandleLogDo) Select(conds ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imHandleLogDo) Where(conds ...gen.Condition) *imHandleLogDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imHandleLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imHandleLogDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imHandleLogDo) Order(conds ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imHandleLogDo) Distinct(cols ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imHandleLogDo) Omit(cols ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imHandleLogDo) Join(table schema.Tabler, on ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imHandleLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imHandleLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imHandleLogDo) Group(cols ...field.Expr) *imHandleLogDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imHandleLogDo) Having(conds ...gen.Condition) *imHandleLogDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imHandleLogDo) Limit(limit int) *imHandleLogDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imHandleLogDo) Offset(offset int) *imHandleLogDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imHandleLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imHandleLogDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imHandleLogDo) Unscoped() *imHandleLogDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imHandleLogDo) Create(values ...*model.ImHandleLog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imHandleLogDo) CreateInBatches(values []*model.ImHandleLog, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imHandleLogDo) Save(values ...*model.ImHandleLog) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imHandleLogDo) First() (*model.ImHandleLog, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImHandleLog), nil
	}
}

func (i imHandleLogDo) Take() (*model.ImHandleLog, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImHandleLog), nil
	}
}

func (i imHandleLogDo) Last() (*model.ImHandleLog, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImHandleLog), nil
	}
}

func (i imHandleLogDo) Find() ([]*model.ImHandleLog, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImHandleLog), err
}

func (i imHandleLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImHandleLog, err error) {
	buf := make([]*model.ImHandleLog, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imHandleLogDo) FindInBatches(result *[]*model.ImHandleLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imHandleLogDo) Attrs(attrs ...field.AssignExpr) *imHandleLogDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imHandleLogDo) Assign(attrs ...field.AssignExpr) *imHandleLogDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imHandleLogDo) Joins(fields ...field.RelationField) *imHandleLogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imHandleLogDo) Preload(fields ...field.RelationField) *imHandleLogDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imHandleLogDo) FirstOrInit() (*model.ImHandleLog, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImHandleLog), nil
	}
}

func (i imHandleLogDo) FirstOrCreate() (*model.ImHandleLog, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImHandleLog), nil
	}
}

func (i imHandleLogDo) FindByPage(offset int, limit int) (result []*model.ImHandleLog, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imHandleLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imHandleLogDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imHandleLogDo) Delete(models ...*model.ImHandleLog) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imHandleLogDo) withDO(do gen.Dao) *imHandleLogDo {
	i.DO = *do.(*gen.DO)
	return i
}
