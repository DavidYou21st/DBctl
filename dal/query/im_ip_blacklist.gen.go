// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImIPBlacklist(db *gorm.DB, opts ...gen.DOOption) imIPBlacklist {
	_imIPBlacklist := imIPBlacklist{}

	_imIPBlacklist.imIPBlacklistDo.UseDB(db, opts...)
	_imIPBlacklist.imIPBlacklistDo.UseModel(&model.ImIPBlacklist{})

	tableName := _imIPBlacklist.imIPBlacklistDo.TableName()
	_imIPBlacklist.ALL = field.NewAsterisk(tableName)
	_imIPBlacklist.ID = field.NewInt64(tableName, "id")
	_imIPBlacklist.IP = field.NewString(tableName, "ip")
	_imIPBlacklist.Status = field.NewInt32(tableName, "status")
	_imIPBlacklist.UnbanTime = field.NewTime(tableName, "unban_time")
	_imIPBlacklist.BanTime = field.NewTime(tableName, "ban_time")
	_imIPBlacklist.EndTime = field.NewTime(tableName, "end_time")
	_imIPBlacklist.Remark = field.NewString(tableName, "remark")
	_imIPBlacklist.CreateBy = field.NewString(tableName, "create_by")
	_imIPBlacklist.UpdateBy = field.NewString(tableName, "update_by")
	_imIPBlacklist.CreatedAt = field.NewTime(tableName, "created_at")
	_imIPBlacklist.UpdatedAt = field.NewTime(tableName, "updated_at")

	_imIPBlacklist.fillFieldMap()

	return _imIPBlacklist
}

type imIPBlacklist struct {
	imIPBlacklistDo imIPBlacklistDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	IP        field.String // IP
	Status    field.Int32  // 状态 1=禁止，2=解禁
	UnbanTime field.Time   // 解禁时间
	BanTime   field.Time   // 封禁时间
	EndTime   field.Time   // 禁止截止时间
	Remark    field.String // 封禁的原因
	CreateBy  field.String // 创建人
	UpdateBy  field.String // 更新人
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i imIPBlacklist) Table(newTableName string) *imIPBlacklist {
	i.imIPBlacklistDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imIPBlacklist) As(alias string) *imIPBlacklist {
	i.imIPBlacklistDo.DO = *(i.imIPBlacklistDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imIPBlacklist) updateTableName(table string) *imIPBlacklist {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.IP = field.NewString(table, "ip")
	i.Status = field.NewInt32(table, "status")
	i.UnbanTime = field.NewTime(table, "unban_time")
	i.BanTime = field.NewTime(table, "ban_time")
	i.EndTime = field.NewTime(table, "end_time")
	i.Remark = field.NewString(table, "remark")
	i.CreateBy = field.NewString(table, "create_by")
	i.UpdateBy = field.NewString(table, "update_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *imIPBlacklist) WithContext(ctx context.Context) *imIPBlacklistDo {
	return i.imIPBlacklistDo.WithContext(ctx)
}

func (i imIPBlacklist) TableName() string { return i.imIPBlacklistDo.TableName() }

func (i imIPBlacklist) Alias() string { return i.imIPBlacklistDo.Alias() }

func (i *imIPBlacklist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imIPBlacklist) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["id"] = i.ID
	i.fieldMap["ip"] = i.IP
	i.fieldMap["status"] = i.Status
	i.fieldMap["unban_time"] = i.UnbanTime
	i.fieldMap["ban_time"] = i.BanTime
	i.fieldMap["end_time"] = i.EndTime
	i.fieldMap["remark"] = i.Remark
	i.fieldMap["create_by"] = i.CreateBy
	i.fieldMap["update_by"] = i.UpdateBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i imIPBlacklist) clone(db *gorm.DB) imIPBlacklist {
	i.imIPBlacklistDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imIPBlacklist) replaceDB(db *gorm.DB) imIPBlacklist {
	i.imIPBlacklistDo.ReplaceDB(db)
	return i
}

type imIPBlacklistDo struct{ gen.DO }

func (i imIPBlacklistDo) Debug() *imIPBlacklistDo {
	return i.withDO(i.DO.Debug())
}

func (i imIPBlacklistDo) WithContext(ctx context.Context) *imIPBlacklistDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imIPBlacklistDo) ReadDB() *imIPBlacklistDo {
	return i.Clauses(dbresolver.Read)
}

func (i imIPBlacklistDo) WriteDB() *imIPBlacklistDo {
	return i.Clauses(dbresolver.Write)
}

func (i imIPBlacklistDo) Session(config *gorm.Session) *imIPBlacklistDo {
	return i.withDO(i.DO.Session(config))
}

func (i imIPBlacklistDo) Clauses(conds ...clause.Expression) *imIPBlacklistDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imIPBlacklistDo) Returning(value interface{}, columns ...string) *imIPBlacklistDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imIPBlacklistDo) Not(conds ...gen.Condition) *imIPBlacklistDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imIPBlacklistDo) Or(conds ...gen.Condition) *imIPBlacklistDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imIPBlacklistDo) Select(conds ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imIPBlacklistDo) Where(conds ...gen.Condition) *imIPBlacklistDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imIPBlacklistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imIPBlacklistDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imIPBlacklistDo) Order(conds ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imIPBlacklistDo) Distinct(cols ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imIPBlacklistDo) Omit(cols ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imIPBlacklistDo) Join(table schema.Tabler, on ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imIPBlacklistDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imIPBlacklistDo) RightJoin(table schema.Tabler, on ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imIPBlacklistDo) Group(cols ...field.Expr) *imIPBlacklistDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imIPBlacklistDo) Having(conds ...gen.Condition) *imIPBlacklistDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imIPBlacklistDo) Limit(limit int) *imIPBlacklistDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imIPBlacklistDo) Offset(offset int) *imIPBlacklistDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imIPBlacklistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imIPBlacklistDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imIPBlacklistDo) Unscoped() *imIPBlacklistDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imIPBlacklistDo) Create(values ...*model.ImIPBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imIPBlacklistDo) CreateInBatches(values []*model.ImIPBlacklist, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imIPBlacklistDo) Save(values ...*model.ImIPBlacklist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imIPBlacklistDo) First() (*model.ImIPBlacklist, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklist), nil
	}
}

func (i imIPBlacklistDo) Take() (*model.ImIPBlacklist, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklist), nil
	}
}

func (i imIPBlacklistDo) Last() (*model.ImIPBlacklist, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklist), nil
	}
}

func (i imIPBlacklistDo) Find() ([]*model.ImIPBlacklist, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImIPBlacklist), err
}

func (i imIPBlacklistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImIPBlacklist, err error) {
	buf := make([]*model.ImIPBlacklist, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imIPBlacklistDo) FindInBatches(result *[]*model.ImIPBlacklist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imIPBlacklistDo) Attrs(attrs ...field.AssignExpr) *imIPBlacklistDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imIPBlacklistDo) Assign(attrs ...field.AssignExpr) *imIPBlacklistDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imIPBlacklistDo) Joins(fields ...field.RelationField) *imIPBlacklistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imIPBlacklistDo) Preload(fields ...field.RelationField) *imIPBlacklistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imIPBlacklistDo) FirstOrInit() (*model.ImIPBlacklist, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklist), nil
	}
}

func (i imIPBlacklistDo) FirstOrCreate() (*model.ImIPBlacklist, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklist), nil
	}
}

func (i imIPBlacklistDo) FindByPage(offset int, limit int) (result []*model.ImIPBlacklist, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imIPBlacklistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imIPBlacklistDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imIPBlacklistDo) Delete(models ...*model.ImIPBlacklist) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imIPBlacklistDo) withDO(do gen.Dao) *imIPBlacklistDo {
	i.DO = *do.(*gen.DO)
	return i
}
