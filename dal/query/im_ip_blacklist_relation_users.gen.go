// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImIPBlacklistRelationUser(db *gorm.DB, opts ...gen.DOOption) imIPBlacklistRelationUser {
	_imIPBlacklistRelationUser := imIPBlacklistRelationUser{}

	_imIPBlacklistRelationUser.imIPBlacklistRelationUserDo.UseDB(db, opts...)
	_imIPBlacklistRelationUser.imIPBlacklistRelationUserDo.UseModel(&model.ImIPBlacklistRelationUser{})

	tableName := _imIPBlacklistRelationUser.imIPBlacklistRelationUserDo.TableName()
	_imIPBlacklistRelationUser.ALL = field.NewAsterisk(tableName)
	_imIPBlacklistRelationUser.IP = field.NewString(tableName, "ip")
	_imIPBlacklistRelationUser.UserID = field.NewString(tableName, "user_id")
	_imIPBlacklistRelationUser.Account = field.NewString(tableName, "account")
	_imIPBlacklistRelationUser.Nickname = field.NewString(tableName, "nickname")
	_imIPBlacklistRelationUser.UnbanTime = field.NewTime(tableName, "unban_time")
	_imIPBlacklistRelationUser.BanTime = field.NewTime(tableName, "ban_time")
	_imIPBlacklistRelationUser.EndTime = field.NewTime(tableName, "end_time")
	_imIPBlacklistRelationUser.Remark = field.NewString(tableName, "remark")
	_imIPBlacklistRelationUser.CreateBy = field.NewString(tableName, "create_by")
	_imIPBlacklistRelationUser.UpdateBy = field.NewString(tableName, "update_by")
	_imIPBlacklistRelationUser.CreatedAt = field.NewTime(tableName, "created_at")
	_imIPBlacklistRelationUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_imIPBlacklistRelationUser.fillFieldMap()

	return _imIPBlacklistRelationUser
}

type imIPBlacklistRelationUser struct {
	imIPBlacklistRelationUserDo imIPBlacklistRelationUserDo

	ALL       field.Asterisk
	IP        field.String // IP
	UserID    field.String // 关联用户ID
	Account   field.String // 关联帐户ID
	Nickname  field.String // 关联昵称
	UnbanTime field.Time   // 解禁时间
	BanTime   field.Time   // 封禁时间
	EndTime   field.Time   // 禁止截止时间
	Remark    field.String // 封禁的原因
	CreateBy  field.String // 创建人
	UpdateBy  field.String // 更新人
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i imIPBlacklistRelationUser) Table(newTableName string) *imIPBlacklistRelationUser {
	i.imIPBlacklistRelationUserDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imIPBlacklistRelationUser) As(alias string) *imIPBlacklistRelationUser {
	i.imIPBlacklistRelationUserDo.DO = *(i.imIPBlacklistRelationUserDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imIPBlacklistRelationUser) updateTableName(table string) *imIPBlacklistRelationUser {
	i.ALL = field.NewAsterisk(table)
	i.IP = field.NewString(table, "ip")
	i.UserID = field.NewString(table, "user_id")
	i.Account = field.NewString(table, "account")
	i.Nickname = field.NewString(table, "nickname")
	i.UnbanTime = field.NewTime(table, "unban_time")
	i.BanTime = field.NewTime(table, "ban_time")
	i.EndTime = field.NewTime(table, "end_time")
	i.Remark = field.NewString(table, "remark")
	i.CreateBy = field.NewString(table, "create_by")
	i.UpdateBy = field.NewString(table, "update_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *imIPBlacklistRelationUser) WithContext(ctx context.Context) *imIPBlacklistRelationUserDo {
	return i.imIPBlacklistRelationUserDo.WithContext(ctx)
}

func (i imIPBlacklistRelationUser) TableName() string {
	return i.imIPBlacklistRelationUserDo.TableName()
}

func (i imIPBlacklistRelationUser) Alias() string { return i.imIPBlacklistRelationUserDo.Alias() }

func (i *imIPBlacklistRelationUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imIPBlacklistRelationUser) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 12)
	i.fieldMap["ip"] = i.IP
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["account"] = i.Account
	i.fieldMap["nickname"] = i.Nickname
	i.fieldMap["unban_time"] = i.UnbanTime
	i.fieldMap["ban_time"] = i.BanTime
	i.fieldMap["end_time"] = i.EndTime
	i.fieldMap["remark"] = i.Remark
	i.fieldMap["create_by"] = i.CreateBy
	i.fieldMap["update_by"] = i.UpdateBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i imIPBlacklistRelationUser) clone(db *gorm.DB) imIPBlacklistRelationUser {
	i.imIPBlacklistRelationUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imIPBlacklistRelationUser) replaceDB(db *gorm.DB) imIPBlacklistRelationUser {
	i.imIPBlacklistRelationUserDo.ReplaceDB(db)
	return i
}

type imIPBlacklistRelationUserDo struct{ gen.DO }

func (i imIPBlacklistRelationUserDo) Debug() *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Debug())
}

func (i imIPBlacklistRelationUserDo) WithContext(ctx context.Context) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imIPBlacklistRelationUserDo) ReadDB() *imIPBlacklistRelationUserDo {
	return i.Clauses(dbresolver.Read)
}

func (i imIPBlacklistRelationUserDo) WriteDB() *imIPBlacklistRelationUserDo {
	return i.Clauses(dbresolver.Write)
}

func (i imIPBlacklistRelationUserDo) Session(config *gorm.Session) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Session(config))
}

func (i imIPBlacklistRelationUserDo) Clauses(conds ...clause.Expression) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imIPBlacklistRelationUserDo) Returning(value interface{}, columns ...string) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imIPBlacklistRelationUserDo) Not(conds ...gen.Condition) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imIPBlacklistRelationUserDo) Or(conds ...gen.Condition) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imIPBlacklistRelationUserDo) Select(conds ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imIPBlacklistRelationUserDo) Where(conds ...gen.Condition) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imIPBlacklistRelationUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imIPBlacklistRelationUserDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imIPBlacklistRelationUserDo) Order(conds ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imIPBlacklistRelationUserDo) Distinct(cols ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imIPBlacklistRelationUserDo) Omit(cols ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imIPBlacklistRelationUserDo) Join(table schema.Tabler, on ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imIPBlacklistRelationUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imIPBlacklistRelationUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imIPBlacklistRelationUserDo) Group(cols ...field.Expr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imIPBlacklistRelationUserDo) Having(conds ...gen.Condition) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imIPBlacklistRelationUserDo) Limit(limit int) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imIPBlacklistRelationUserDo) Offset(offset int) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imIPBlacklistRelationUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imIPBlacklistRelationUserDo) Unscoped() *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imIPBlacklistRelationUserDo) Create(values ...*model.ImIPBlacklistRelationUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imIPBlacklistRelationUserDo) CreateInBatches(values []*model.ImIPBlacklistRelationUser, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imIPBlacklistRelationUserDo) Save(values ...*model.ImIPBlacklistRelationUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imIPBlacklistRelationUserDo) First() (*model.ImIPBlacklistRelationUser, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklistRelationUser), nil
	}
}

func (i imIPBlacklistRelationUserDo) Take() (*model.ImIPBlacklistRelationUser, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklistRelationUser), nil
	}
}

func (i imIPBlacklistRelationUserDo) Last() (*model.ImIPBlacklistRelationUser, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklistRelationUser), nil
	}
}

func (i imIPBlacklistRelationUserDo) Find() ([]*model.ImIPBlacklistRelationUser, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImIPBlacklistRelationUser), err
}

func (i imIPBlacklistRelationUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImIPBlacklistRelationUser, err error) {
	buf := make([]*model.ImIPBlacklistRelationUser, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imIPBlacklistRelationUserDo) FindInBatches(result *[]*model.ImIPBlacklistRelationUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imIPBlacklistRelationUserDo) Attrs(attrs ...field.AssignExpr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imIPBlacklistRelationUserDo) Assign(attrs ...field.AssignExpr) *imIPBlacklistRelationUserDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imIPBlacklistRelationUserDo) Joins(fields ...field.RelationField) *imIPBlacklistRelationUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imIPBlacklistRelationUserDo) Preload(fields ...field.RelationField) *imIPBlacklistRelationUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imIPBlacklistRelationUserDo) FirstOrInit() (*model.ImIPBlacklistRelationUser, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklistRelationUser), nil
	}
}

func (i imIPBlacklistRelationUserDo) FirstOrCreate() (*model.ImIPBlacklistRelationUser, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPBlacklistRelationUser), nil
	}
}

func (i imIPBlacklistRelationUserDo) FindByPage(offset int, limit int) (result []*model.ImIPBlacklistRelationUser, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imIPBlacklistRelationUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imIPBlacklistRelationUserDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imIPBlacklistRelationUserDo) Delete(models ...*model.ImIPBlacklistRelationUser) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imIPBlacklistRelationUserDo) withDO(do gen.Dao) *imIPBlacklistRelationUserDo {
	i.DO = *do.(*gen.DO)
	return i
}
