// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImIPWhitelist(db *gorm.DB, opts ...gen.DOOption) imIPWhitelist {
	_imIPWhitelist := imIPWhitelist{}

	_imIPWhitelist.imIPWhitelistDo.UseDB(db, opts...)
	_imIPWhitelist.imIPWhitelistDo.UseModel(&model.ImIPWhitelist{})

	tableName := _imIPWhitelist.imIPWhitelistDo.TableName()
	_imIPWhitelist.ALL = field.NewAsterisk(tableName)
	_imIPWhitelist.ID = field.NewInt64(tableName, "id")
	_imIPWhitelist.UserID = field.NewString(tableName, "user_id")
	_imIPWhitelist.Account = field.NewString(tableName, "account")
	_imIPWhitelist.Nickname = field.NewString(tableName, "nickname")
	_imIPWhitelist.Role = field.NewInt32(tableName, "role")
	_imIPWhitelist.Remark = field.NewString(tableName, "remark")
	_imIPWhitelist.CreateBy = field.NewString(tableName, "create_by")
	_imIPWhitelist.UpdateBy = field.NewString(tableName, "update_by")
	_imIPWhitelist.CreatedAt = field.NewTime(tableName, "created_at")
	_imIPWhitelist.UpdatedAt = field.NewTime(tableName, "updated_at")

	_imIPWhitelist.fillFieldMap()

	return _imIPWhitelist
}

type imIPWhitelist struct {
	imIPWhitelistDo imIPWhitelistDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	UserID    field.String // 用户ID
	Account   field.String // 帐户ID
	Nickname  field.String // 昵称
	Role      field.Int32  // 身份 1=普通用户、2=特权用户
	Remark    field.String // 原因
	CreateBy  field.String // 创建人
	UpdateBy  field.String // 更新人
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i imIPWhitelist) Table(newTableName string) *imIPWhitelist {
	i.imIPWhitelistDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imIPWhitelist) As(alias string) *imIPWhitelist {
	i.imIPWhitelistDo.DO = *(i.imIPWhitelistDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imIPWhitelist) updateTableName(table string) *imIPWhitelist {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.UserID = field.NewString(table, "user_id")
	i.Account = field.NewString(table, "account")
	i.Nickname = field.NewString(table, "nickname")
	i.Role = field.NewInt32(table, "role")
	i.Remark = field.NewString(table, "remark")
	i.CreateBy = field.NewString(table, "create_by")
	i.UpdateBy = field.NewString(table, "update_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *imIPWhitelist) WithContext(ctx context.Context) *imIPWhitelistDo {
	return i.imIPWhitelistDo.WithContext(ctx)
}

func (i imIPWhitelist) TableName() string { return i.imIPWhitelistDo.TableName() }

func (i imIPWhitelist) Alias() string { return i.imIPWhitelistDo.Alias() }

func (i *imIPWhitelist) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imIPWhitelist) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 10)
	i.fieldMap["id"] = i.ID
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["account"] = i.Account
	i.fieldMap["nickname"] = i.Nickname
	i.fieldMap["role"] = i.Role
	i.fieldMap["remark"] = i.Remark
	i.fieldMap["create_by"] = i.CreateBy
	i.fieldMap["update_by"] = i.UpdateBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i imIPWhitelist) clone(db *gorm.DB) imIPWhitelist {
	i.imIPWhitelistDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imIPWhitelist) replaceDB(db *gorm.DB) imIPWhitelist {
	i.imIPWhitelistDo.ReplaceDB(db)
	return i
}

type imIPWhitelistDo struct{ gen.DO }

func (i imIPWhitelistDo) Debug() *imIPWhitelistDo {
	return i.withDO(i.DO.Debug())
}

func (i imIPWhitelistDo) WithContext(ctx context.Context) *imIPWhitelistDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imIPWhitelistDo) ReadDB() *imIPWhitelistDo {
	return i.Clauses(dbresolver.Read)
}

func (i imIPWhitelistDo) WriteDB() *imIPWhitelistDo {
	return i.Clauses(dbresolver.Write)
}

func (i imIPWhitelistDo) Session(config *gorm.Session) *imIPWhitelistDo {
	return i.withDO(i.DO.Session(config))
}

func (i imIPWhitelistDo) Clauses(conds ...clause.Expression) *imIPWhitelistDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imIPWhitelistDo) Returning(value interface{}, columns ...string) *imIPWhitelistDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imIPWhitelistDo) Not(conds ...gen.Condition) *imIPWhitelistDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imIPWhitelistDo) Or(conds ...gen.Condition) *imIPWhitelistDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imIPWhitelistDo) Select(conds ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imIPWhitelistDo) Where(conds ...gen.Condition) *imIPWhitelistDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imIPWhitelistDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imIPWhitelistDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imIPWhitelistDo) Order(conds ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imIPWhitelistDo) Distinct(cols ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imIPWhitelistDo) Omit(cols ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imIPWhitelistDo) Join(table schema.Tabler, on ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imIPWhitelistDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imIPWhitelistDo) RightJoin(table schema.Tabler, on ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imIPWhitelistDo) Group(cols ...field.Expr) *imIPWhitelistDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imIPWhitelistDo) Having(conds ...gen.Condition) *imIPWhitelistDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imIPWhitelistDo) Limit(limit int) *imIPWhitelistDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imIPWhitelistDo) Offset(offset int) *imIPWhitelistDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imIPWhitelistDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imIPWhitelistDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imIPWhitelistDo) Unscoped() *imIPWhitelistDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imIPWhitelistDo) Create(values ...*model.ImIPWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imIPWhitelistDo) CreateInBatches(values []*model.ImIPWhitelist, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imIPWhitelistDo) Save(values ...*model.ImIPWhitelist) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imIPWhitelistDo) First() (*model.ImIPWhitelist, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPWhitelist), nil
	}
}

func (i imIPWhitelistDo) Take() (*model.ImIPWhitelist, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPWhitelist), nil
	}
}

func (i imIPWhitelistDo) Last() (*model.ImIPWhitelist, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPWhitelist), nil
	}
}

func (i imIPWhitelistDo) Find() ([]*model.ImIPWhitelist, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImIPWhitelist), err
}

func (i imIPWhitelistDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImIPWhitelist, err error) {
	buf := make([]*model.ImIPWhitelist, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imIPWhitelistDo) FindInBatches(result *[]*model.ImIPWhitelist, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imIPWhitelistDo) Attrs(attrs ...field.AssignExpr) *imIPWhitelistDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imIPWhitelistDo) Assign(attrs ...field.AssignExpr) *imIPWhitelistDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imIPWhitelistDo) Joins(fields ...field.RelationField) *imIPWhitelistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imIPWhitelistDo) Preload(fields ...field.RelationField) *imIPWhitelistDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imIPWhitelistDo) FirstOrInit() (*model.ImIPWhitelist, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPWhitelist), nil
	}
}

func (i imIPWhitelistDo) FirstOrCreate() (*model.ImIPWhitelist, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImIPWhitelist), nil
	}
}

func (i imIPWhitelistDo) FindByPage(offset int, limit int) (result []*model.ImIPWhitelist, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imIPWhitelistDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imIPWhitelistDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imIPWhitelistDo) Delete(models ...*model.ImIPWhitelist) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imIPWhitelistDo) withDO(do gen.Dao) *imIPWhitelistDo {
	i.DO = *do.(*gen.DO)
	return i
}
