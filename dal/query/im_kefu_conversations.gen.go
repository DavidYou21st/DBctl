// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImKefuConversation(db *gorm.DB, opts ...gen.DOOption) imKefuConversation {
	_imKefuConversation := imKefuConversation{}

	_imKefuConversation.imKefuConversationDo.UseDB(db, opts...)
	_imKefuConversation.imKefuConversationDo.UseModel(&model.ImKefuConversation{})

	tableName := _imKefuConversation.imKefuConversationDo.TableName()
	_imKefuConversation.ALL = field.NewAsterisk(tableName)
	_imKefuConversation.ID = field.NewInt64(tableName, "id")
	_imKefuConversation.GroupID = field.NewString(tableName, "group_id")
	_imKefuConversation.UserID = field.NewString(tableName, "user_id")
	_imKefuConversation.KefuID = field.NewString(tableName, "kefu_id")
	_imKefuConversation.DeviceID = field.NewString(tableName, "device_id")
	_imKefuConversation.Platform = field.NewString(tableName, "platform")
	_imKefuConversation.ServiceType = field.NewInt32(tableName, "service_type")
	_imKefuConversation.Summary = field.NewString(tableName, "summary")
	_imKefuConversation.StartSeq = field.NewString(tableName, "start_seq")
	_imKefuConversation.EndSeq = field.NewString(tableName, "end_seq")
	_imKefuConversation.MsgNum = field.NewString(tableName, "msg_num")
	_imKefuConversation.Status = field.NewInt32(tableName, "status")
	_imKefuConversation.HandleTime = field.NewTime(tableName, "handle_time")
	_imKefuConversation.CreatedAt = field.NewTime(tableName, "created_at")
	_imKefuConversation.UpdatedAt = field.NewTime(tableName, "updated_at")

	_imKefuConversation.fillFieldMap()

	return _imKefuConversation
}

type imKefuConversation struct {
	imKefuConversationDo imKefuConversationDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键id
	GroupID     field.String // 群ID
	UserID      field.String // 用户ID
	KefuID      field.String // 客服ID
	DeviceID    field.String // 设备的id
	Platform    field.String // 会话来源(平台)
	ServiceType field.Int32  // 服务类型 1=多端登录，2=咨询
	Summary     field.String // 会话总结
	StartSeq    field.String // 会话开始信息seq
	EndSeq      field.String // 会话结束信息seq
	MsgNum      field.String // 会话信息数量
	Status      field.Int32  // 处理状态 1=进行中，2=已处理
	HandleTime  field.Time   // 处理时间
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i imKefuConversation) Table(newTableName string) *imKefuConversation {
	i.imKefuConversationDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imKefuConversation) As(alias string) *imKefuConversation {
	i.imKefuConversationDo.DO = *(i.imKefuConversationDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imKefuConversation) updateTableName(table string) *imKefuConversation {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.GroupID = field.NewString(table, "group_id")
	i.UserID = field.NewString(table, "user_id")
	i.KefuID = field.NewString(table, "kefu_id")
	i.DeviceID = field.NewString(table, "device_id")
	i.Platform = field.NewString(table, "platform")
	i.ServiceType = field.NewInt32(table, "service_type")
	i.Summary = field.NewString(table, "summary")
	i.StartSeq = field.NewString(table, "start_seq")
	i.EndSeq = field.NewString(table, "end_seq")
	i.MsgNum = field.NewString(table, "msg_num")
	i.Status = field.NewInt32(table, "status")
	i.HandleTime = field.NewTime(table, "handle_time")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *imKefuConversation) WithContext(ctx context.Context) *imKefuConversationDo {
	return i.imKefuConversationDo.WithContext(ctx)
}

func (i imKefuConversation) TableName() string { return i.imKefuConversationDo.TableName() }

func (i imKefuConversation) Alias() string { return i.imKefuConversationDo.Alias() }

func (i *imKefuConversation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imKefuConversation) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 15)
	i.fieldMap["id"] = i.ID
	i.fieldMap["group_id"] = i.GroupID
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["kefu_id"] = i.KefuID
	i.fieldMap["device_id"] = i.DeviceID
	i.fieldMap["platform"] = i.Platform
	i.fieldMap["service_type"] = i.ServiceType
	i.fieldMap["summary"] = i.Summary
	i.fieldMap["start_seq"] = i.StartSeq
	i.fieldMap["end_seq"] = i.EndSeq
	i.fieldMap["msg_num"] = i.MsgNum
	i.fieldMap["status"] = i.Status
	i.fieldMap["handle_time"] = i.HandleTime
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i imKefuConversation) clone(db *gorm.DB) imKefuConversation {
	i.imKefuConversationDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imKefuConversation) replaceDB(db *gorm.DB) imKefuConversation {
	i.imKefuConversationDo.ReplaceDB(db)
	return i
}

type imKefuConversationDo struct{ gen.DO }

func (i imKefuConversationDo) Debug() *imKefuConversationDo {
	return i.withDO(i.DO.Debug())
}

func (i imKefuConversationDo) WithContext(ctx context.Context) *imKefuConversationDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imKefuConversationDo) ReadDB() *imKefuConversationDo {
	return i.Clauses(dbresolver.Read)
}

func (i imKefuConversationDo) WriteDB() *imKefuConversationDo {
	return i.Clauses(dbresolver.Write)
}

func (i imKefuConversationDo) Session(config *gorm.Session) *imKefuConversationDo {
	return i.withDO(i.DO.Session(config))
}

func (i imKefuConversationDo) Clauses(conds ...clause.Expression) *imKefuConversationDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imKefuConversationDo) Returning(value interface{}, columns ...string) *imKefuConversationDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imKefuConversationDo) Not(conds ...gen.Condition) *imKefuConversationDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imKefuConversationDo) Or(conds ...gen.Condition) *imKefuConversationDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imKefuConversationDo) Select(conds ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imKefuConversationDo) Where(conds ...gen.Condition) *imKefuConversationDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imKefuConversationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imKefuConversationDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imKefuConversationDo) Order(conds ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imKefuConversationDo) Distinct(cols ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imKefuConversationDo) Omit(cols ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imKefuConversationDo) Join(table schema.Tabler, on ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imKefuConversationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imKefuConversationDo) RightJoin(table schema.Tabler, on ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imKefuConversationDo) Group(cols ...field.Expr) *imKefuConversationDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imKefuConversationDo) Having(conds ...gen.Condition) *imKefuConversationDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imKefuConversationDo) Limit(limit int) *imKefuConversationDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imKefuConversationDo) Offset(offset int) *imKefuConversationDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imKefuConversationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imKefuConversationDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imKefuConversationDo) Unscoped() *imKefuConversationDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imKefuConversationDo) Create(values ...*model.ImKefuConversation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imKefuConversationDo) CreateInBatches(values []*model.ImKefuConversation, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imKefuConversationDo) Save(values ...*model.ImKefuConversation) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imKefuConversationDo) First() (*model.ImKefuConversation, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImKefuConversation), nil
	}
}

func (i imKefuConversationDo) Take() (*model.ImKefuConversation, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImKefuConversation), nil
	}
}

func (i imKefuConversationDo) Last() (*model.ImKefuConversation, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImKefuConversation), nil
	}
}

func (i imKefuConversationDo) Find() ([]*model.ImKefuConversation, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImKefuConversation), err
}

func (i imKefuConversationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImKefuConversation, err error) {
	buf := make([]*model.ImKefuConversation, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imKefuConversationDo) FindInBatches(result *[]*model.ImKefuConversation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imKefuConversationDo) Attrs(attrs ...field.AssignExpr) *imKefuConversationDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imKefuConversationDo) Assign(attrs ...field.AssignExpr) *imKefuConversationDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imKefuConversationDo) Joins(fields ...field.RelationField) *imKefuConversationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imKefuConversationDo) Preload(fields ...field.RelationField) *imKefuConversationDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imKefuConversationDo) FirstOrInit() (*model.ImKefuConversation, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImKefuConversation), nil
	}
}

func (i imKefuConversationDo) FirstOrCreate() (*model.ImKefuConversation, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImKefuConversation), nil
	}
}

func (i imKefuConversationDo) FindByPage(offset int, limit int) (result []*model.ImKefuConversation, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imKefuConversationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imKefuConversationDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imKefuConversationDo) Delete(models ...*model.ImKefuConversation) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imKefuConversationDo) withDO(do gen.Dao) *imKefuConversationDo {
	i.DO = *do.(*gen.DO)
	return i
}
