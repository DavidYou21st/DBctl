// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImLoginDevice(db *gorm.DB, opts ...gen.DOOption) imLoginDevice {
	_imLoginDevice := imLoginDevice{}

	_imLoginDevice.imLoginDeviceDo.UseDB(db, opts...)
	_imLoginDevice.imLoginDeviceDo.UseModel(&model.ImLoginDevice{})

	tableName := _imLoginDevice.imLoginDeviceDo.TableName()
	_imLoginDevice.ALL = field.NewAsterisk(tableName)
	_imLoginDevice.ID = field.NewInt32(tableName, "id")
	_imLoginDevice.UserID = field.NewString(tableName, "user_id")
	_imLoginDevice.Platform = field.NewString(tableName, "platform")
	_imLoginDevice.DeviceModel = field.NewString(tableName, "device_model")
	_imLoginDevice.Version = field.NewString(tableName, "version")
	_imLoginDevice.IP = field.NewString(tableName, "ip")
	_imLoginDevice.Status = field.NewInt32(tableName, "status")
	_imLoginDevice.LoginTime = field.NewTime(tableName, "login_time")
	_imLoginDevice.UpdateTime = field.NewTime(tableName, "update_time")
	_imLoginDevice.BindDeviceID = field.NewString(tableName, "bind_device_id")
	_imLoginDevice.ForceLogoutStatus = field.NewInt32(tableName, "force_logout_status")

	_imLoginDevice.fillFieldMap()

	return _imLoginDevice
}

type imLoginDevice struct {
	imLoginDeviceDo imLoginDeviceDo

	ALL               field.Asterisk
	ID                field.Int32  // 设备id
	UserID            field.String // 用户id
	Platform          field.String // 设备平台
	DeviceModel       field.String // 设备型号
	Version           field.String // 登录版本
	IP                field.String // ip地址
	Status            field.Int32  // 在线状态 1 - 正常， 2 - 离线
	LoginTime         field.Time   // 登录时间
	UpdateTime        field.Time   // 更新时间
	BindDeviceID      field.String // 绑定设备的id
	ForceLogoutStatus field.Int32  // 是否被强制登出过, 1 - 是强制下线, 2 - 没强制下线

	fieldMap map[string]field.Expr
}

func (i imLoginDevice) Table(newTableName string) *imLoginDevice {
	i.imLoginDeviceDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imLoginDevice) As(alias string) *imLoginDevice {
	i.imLoginDeviceDo.DO = *(i.imLoginDeviceDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imLoginDevice) updateTableName(table string) *imLoginDevice {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.UserID = field.NewString(table, "user_id")
	i.Platform = field.NewString(table, "platform")
	i.DeviceModel = field.NewString(table, "device_model")
	i.Version = field.NewString(table, "version")
	i.IP = field.NewString(table, "ip")
	i.Status = field.NewInt32(table, "status")
	i.LoginTime = field.NewTime(table, "login_time")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.BindDeviceID = field.NewString(table, "bind_device_id")
	i.ForceLogoutStatus = field.NewInt32(table, "force_logout_status")

	i.fillFieldMap()

	return i
}

func (i *imLoginDevice) WithContext(ctx context.Context) *imLoginDeviceDo {
	return i.imLoginDeviceDo.WithContext(ctx)
}

func (i imLoginDevice) TableName() string { return i.imLoginDeviceDo.TableName() }

func (i imLoginDevice) Alias() string { return i.imLoginDeviceDo.Alias() }

func (i *imLoginDevice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imLoginDevice) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["id"] = i.ID
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["platform"] = i.Platform
	i.fieldMap["device_model"] = i.DeviceModel
	i.fieldMap["version"] = i.Version
	i.fieldMap["ip"] = i.IP
	i.fieldMap["status"] = i.Status
	i.fieldMap["login_time"] = i.LoginTime
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["bind_device_id"] = i.BindDeviceID
	i.fieldMap["force_logout_status"] = i.ForceLogoutStatus
}

func (i imLoginDevice) clone(db *gorm.DB) imLoginDevice {
	i.imLoginDeviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imLoginDevice) replaceDB(db *gorm.DB) imLoginDevice {
	i.imLoginDeviceDo.ReplaceDB(db)
	return i
}

type imLoginDeviceDo struct{ gen.DO }

func (i imLoginDeviceDo) Debug() *imLoginDeviceDo {
	return i.withDO(i.DO.Debug())
}

func (i imLoginDeviceDo) WithContext(ctx context.Context) *imLoginDeviceDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imLoginDeviceDo) ReadDB() *imLoginDeviceDo {
	return i.Clauses(dbresolver.Read)
}

func (i imLoginDeviceDo) WriteDB() *imLoginDeviceDo {
	return i.Clauses(dbresolver.Write)
}

func (i imLoginDeviceDo) Session(config *gorm.Session) *imLoginDeviceDo {
	return i.withDO(i.DO.Session(config))
}

func (i imLoginDeviceDo) Clauses(conds ...clause.Expression) *imLoginDeviceDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imLoginDeviceDo) Returning(value interface{}, columns ...string) *imLoginDeviceDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imLoginDeviceDo) Not(conds ...gen.Condition) *imLoginDeviceDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imLoginDeviceDo) Or(conds ...gen.Condition) *imLoginDeviceDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imLoginDeviceDo) Select(conds ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imLoginDeviceDo) Where(conds ...gen.Condition) *imLoginDeviceDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imLoginDeviceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imLoginDeviceDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imLoginDeviceDo) Order(conds ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imLoginDeviceDo) Distinct(cols ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imLoginDeviceDo) Omit(cols ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imLoginDeviceDo) Join(table schema.Tabler, on ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imLoginDeviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imLoginDeviceDo) RightJoin(table schema.Tabler, on ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imLoginDeviceDo) Group(cols ...field.Expr) *imLoginDeviceDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imLoginDeviceDo) Having(conds ...gen.Condition) *imLoginDeviceDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imLoginDeviceDo) Limit(limit int) *imLoginDeviceDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imLoginDeviceDo) Offset(offset int) *imLoginDeviceDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imLoginDeviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imLoginDeviceDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imLoginDeviceDo) Unscoped() *imLoginDeviceDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imLoginDeviceDo) Create(values ...*model.ImLoginDevice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imLoginDeviceDo) CreateInBatches(values []*model.ImLoginDevice, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imLoginDeviceDo) Save(values ...*model.ImLoginDevice) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imLoginDeviceDo) First() (*model.ImLoginDevice, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImLoginDevice), nil
	}
}

func (i imLoginDeviceDo) Take() (*model.ImLoginDevice, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImLoginDevice), nil
	}
}

func (i imLoginDeviceDo) Last() (*model.ImLoginDevice, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImLoginDevice), nil
	}
}

func (i imLoginDeviceDo) Find() ([]*model.ImLoginDevice, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImLoginDevice), err
}

func (i imLoginDeviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImLoginDevice, err error) {
	buf := make([]*model.ImLoginDevice, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imLoginDeviceDo) FindInBatches(result *[]*model.ImLoginDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imLoginDeviceDo) Attrs(attrs ...field.AssignExpr) *imLoginDeviceDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imLoginDeviceDo) Assign(attrs ...field.AssignExpr) *imLoginDeviceDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imLoginDeviceDo) Joins(fields ...field.RelationField) *imLoginDeviceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imLoginDeviceDo) Preload(fields ...field.RelationField) *imLoginDeviceDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imLoginDeviceDo) FirstOrInit() (*model.ImLoginDevice, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImLoginDevice), nil
	}
}

func (i imLoginDeviceDo) FirstOrCreate() (*model.ImLoginDevice, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImLoginDevice), nil
	}
}

func (i imLoginDeviceDo) FindByPage(offset int, limit int) (result []*model.ImLoginDevice, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imLoginDeviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imLoginDeviceDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imLoginDeviceDo) Delete(models ...*model.ImLoginDevice) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imLoginDeviceDo) withDO(do gen.Dao) *imLoginDeviceDo {
	i.DO = *do.(*gen.DO)
	return i
}
