// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImRegister(db *gorm.DB, opts ...gen.DOOption) imRegister {
	_imRegister := imRegister{}

	_imRegister.imRegisterDo.UseDB(db, opts...)
	_imRegister.imRegisterDo.UseModel(&model.ImRegister{})

	tableName := _imRegister.imRegisterDo.TableName()
	_imRegister.ALL = field.NewAsterisk(tableName)
	_imRegister.Account = field.NewString(tableName, "account")
	_imRegister.Password = field.NewString(tableName, "password")
	_imRegister.Ex = field.NewString(tableName, "ex")
	_imRegister.UserID = field.NewString(tableName, "user_id")
	_imRegister.Platform = field.NewInt32(tableName, "platform")
	_imRegister.RegisterIP = field.NewString(tableName, "register_ip")
	_imRegister.CreateTime = field.NewTime(tableName, "create_time")
	_imRegister.UpdateTime = field.NewTime(tableName, "update_time")

	_imRegister.fillFieldMap()

	return _imRegister
}

type imRegister struct {
	imRegisterDo imRegisterDo

	ALL        field.Asterisk
	Account    field.String
	Password   field.String
	Ex         field.String
	UserID     field.String
	Platform   field.Int32 // 平台，IOS:1、安卓:2、window:3、OSX:4、Web:5、小程序:6、Linux:7
	RegisterIP field.String
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (i imRegister) Table(newTableName string) *imRegister {
	i.imRegisterDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imRegister) As(alias string) *imRegister {
	i.imRegisterDo.DO = *(i.imRegisterDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imRegister) updateTableName(table string) *imRegister {
	i.ALL = field.NewAsterisk(table)
	i.Account = field.NewString(table, "account")
	i.Password = field.NewString(table, "password")
	i.Ex = field.NewString(table, "ex")
	i.UserID = field.NewString(table, "user_id")
	i.Platform = field.NewInt32(table, "platform")
	i.RegisterIP = field.NewString(table, "register_ip")
	i.CreateTime = field.NewTime(table, "create_time")
	i.UpdateTime = field.NewTime(table, "update_time")

	i.fillFieldMap()

	return i
}

func (i *imRegister) WithContext(ctx context.Context) *imRegisterDo {
	return i.imRegisterDo.WithContext(ctx)
}

func (i imRegister) TableName() string { return i.imRegisterDo.TableName() }

func (i imRegister) Alias() string { return i.imRegisterDo.Alias() }

func (i *imRegister) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imRegister) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["account"] = i.Account
	i.fieldMap["password"] = i.Password
	i.fieldMap["ex"] = i.Ex
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["platform"] = i.Platform
	i.fieldMap["register_ip"] = i.RegisterIP
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["update_time"] = i.UpdateTime
}

func (i imRegister) clone(db *gorm.DB) imRegister {
	i.imRegisterDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imRegister) replaceDB(db *gorm.DB) imRegister {
	i.imRegisterDo.ReplaceDB(db)
	return i
}

type imRegisterDo struct{ gen.DO }

func (i imRegisterDo) Debug() *imRegisterDo {
	return i.withDO(i.DO.Debug())
}

func (i imRegisterDo) WithContext(ctx context.Context) *imRegisterDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imRegisterDo) ReadDB() *imRegisterDo {
	return i.Clauses(dbresolver.Read)
}

func (i imRegisterDo) WriteDB() *imRegisterDo {
	return i.Clauses(dbresolver.Write)
}

func (i imRegisterDo) Session(config *gorm.Session) *imRegisterDo {
	return i.withDO(i.DO.Session(config))
}

func (i imRegisterDo) Clauses(conds ...clause.Expression) *imRegisterDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imRegisterDo) Returning(value interface{}, columns ...string) *imRegisterDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imRegisterDo) Not(conds ...gen.Condition) *imRegisterDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imRegisterDo) Or(conds ...gen.Condition) *imRegisterDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imRegisterDo) Select(conds ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imRegisterDo) Where(conds ...gen.Condition) *imRegisterDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imRegisterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imRegisterDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imRegisterDo) Order(conds ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imRegisterDo) Distinct(cols ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imRegisterDo) Omit(cols ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imRegisterDo) Join(table schema.Tabler, on ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imRegisterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imRegisterDo) RightJoin(table schema.Tabler, on ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imRegisterDo) Group(cols ...field.Expr) *imRegisterDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imRegisterDo) Having(conds ...gen.Condition) *imRegisterDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imRegisterDo) Limit(limit int) *imRegisterDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imRegisterDo) Offset(offset int) *imRegisterDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imRegisterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imRegisterDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imRegisterDo) Unscoped() *imRegisterDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imRegisterDo) Create(values ...*model.ImRegister) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imRegisterDo) CreateInBatches(values []*model.ImRegister, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imRegisterDo) Save(values ...*model.ImRegister) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imRegisterDo) First() (*model.ImRegister, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImRegister), nil
	}
}

func (i imRegisterDo) Take() (*model.ImRegister, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImRegister), nil
	}
}

func (i imRegisterDo) Last() (*model.ImRegister, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImRegister), nil
	}
}

func (i imRegisterDo) Find() ([]*model.ImRegister, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImRegister), err
}

func (i imRegisterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImRegister, err error) {
	buf := make([]*model.ImRegister, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imRegisterDo) FindInBatches(result *[]*model.ImRegister, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imRegisterDo) Attrs(attrs ...field.AssignExpr) *imRegisterDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imRegisterDo) Assign(attrs ...field.AssignExpr) *imRegisterDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imRegisterDo) Joins(fields ...field.RelationField) *imRegisterDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imRegisterDo) Preload(fields ...field.RelationField) *imRegisterDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imRegisterDo) FirstOrInit() (*model.ImRegister, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImRegister), nil
	}
}

func (i imRegisterDo) FirstOrCreate() (*model.ImRegister, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImRegister), nil
	}
}

func (i imRegisterDo) FindByPage(offset int, limit int) (result []*model.ImRegister, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imRegisterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imRegisterDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imRegisterDo) Delete(models ...*model.ImRegister) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imRegisterDo) withDO(do gen.Dao) *imRegisterDo {
	i.DO = *do.(*gen.DO)
	return i
}
