// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImSensitiveWord(db *gorm.DB, opts ...gen.DOOption) imSensitiveWord {
	_imSensitiveWord := imSensitiveWord{}

	_imSensitiveWord.imSensitiveWordDo.UseDB(db, opts...)
	_imSensitiveWord.imSensitiveWordDo.UseModel(&model.ImSensitiveWord{})

	tableName := _imSensitiveWord.imSensitiveWordDo.TableName()
	_imSensitiveWord.ALL = field.NewAsterisk(tableName)
	_imSensitiveWord.ID = field.NewInt32(tableName, "id")
	_imSensitiveWord.Word = field.NewString(tableName, "word")
	_imSensitiveWord.Status = field.NewInt32(tableName, "status")
	_imSensitiveWord.LibID = field.NewString(tableName, "lib_id")
	_imSensitiveWord.Label = field.NewString(tableName, "label")
	_imSensitiveWord.OperatorUserID = field.NewString(tableName, "operator_user_id")
	_imSensitiveWord.CreatedAt = field.NewTime(tableName, "created_at")
	_imSensitiveWord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_imSensitiveWord.fillFieldMap()

	return _imSensitiveWord
}

type imSensitiveWord struct {
	imSensitiveWordDo imSensitiveWordDo

	ALL            field.Asterisk
	ID             field.Int32  // ID
	Word           field.String // 敏感词
	Status         field.Int32  // 状态 0=禁用，1=启用
	LibID          field.String // 词库 ID
	Label          field.String // 敏感词分类：Normal/Illegal/Abuse/Polity/Ad/Porn/Sexy/Terror/Composite
	OperatorUserID field.String // 操作者的UserID
	CreatedAt      field.Time   // 添加时间
	UpdatedAt      field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (i imSensitiveWord) Table(newTableName string) *imSensitiveWord {
	i.imSensitiveWordDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imSensitiveWord) As(alias string) *imSensitiveWord {
	i.imSensitiveWordDo.DO = *(i.imSensitiveWordDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imSensitiveWord) updateTableName(table string) *imSensitiveWord {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.Word = field.NewString(table, "word")
	i.Status = field.NewInt32(table, "status")
	i.LibID = field.NewString(table, "lib_id")
	i.Label = field.NewString(table, "label")
	i.OperatorUserID = field.NewString(table, "operator_user_id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *imSensitiveWord) WithContext(ctx context.Context) *imSensitiveWordDo {
	return i.imSensitiveWordDo.WithContext(ctx)
}

func (i imSensitiveWord) TableName() string { return i.imSensitiveWordDo.TableName() }

func (i imSensitiveWord) Alias() string { return i.imSensitiveWordDo.Alias() }

func (i *imSensitiveWord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imSensitiveWord) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["word"] = i.Word
	i.fieldMap["status"] = i.Status
	i.fieldMap["lib_id"] = i.LibID
	i.fieldMap["label"] = i.Label
	i.fieldMap["operator_user_id"] = i.OperatorUserID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i imSensitiveWord) clone(db *gorm.DB) imSensitiveWord {
	i.imSensitiveWordDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imSensitiveWord) replaceDB(db *gorm.DB) imSensitiveWord {
	i.imSensitiveWordDo.ReplaceDB(db)
	return i
}

type imSensitiveWordDo struct{ gen.DO }

func (i imSensitiveWordDo) Debug() *imSensitiveWordDo {
	return i.withDO(i.DO.Debug())
}

func (i imSensitiveWordDo) WithContext(ctx context.Context) *imSensitiveWordDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imSensitiveWordDo) ReadDB() *imSensitiveWordDo {
	return i.Clauses(dbresolver.Read)
}

func (i imSensitiveWordDo) WriteDB() *imSensitiveWordDo {
	return i.Clauses(dbresolver.Write)
}

func (i imSensitiveWordDo) Session(config *gorm.Session) *imSensitiveWordDo {
	return i.withDO(i.DO.Session(config))
}

func (i imSensitiveWordDo) Clauses(conds ...clause.Expression) *imSensitiveWordDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imSensitiveWordDo) Returning(value interface{}, columns ...string) *imSensitiveWordDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imSensitiveWordDo) Not(conds ...gen.Condition) *imSensitiveWordDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imSensitiveWordDo) Or(conds ...gen.Condition) *imSensitiveWordDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imSensitiveWordDo) Select(conds ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imSensitiveWordDo) Where(conds ...gen.Condition) *imSensitiveWordDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imSensitiveWordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imSensitiveWordDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imSensitiveWordDo) Order(conds ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imSensitiveWordDo) Distinct(cols ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imSensitiveWordDo) Omit(cols ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imSensitiveWordDo) Join(table schema.Tabler, on ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imSensitiveWordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imSensitiveWordDo) RightJoin(table schema.Tabler, on ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imSensitiveWordDo) Group(cols ...field.Expr) *imSensitiveWordDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imSensitiveWordDo) Having(conds ...gen.Condition) *imSensitiveWordDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imSensitiveWordDo) Limit(limit int) *imSensitiveWordDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imSensitiveWordDo) Offset(offset int) *imSensitiveWordDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imSensitiveWordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imSensitiveWordDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imSensitiveWordDo) Unscoped() *imSensitiveWordDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imSensitiveWordDo) Create(values ...*model.ImSensitiveWord) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imSensitiveWordDo) CreateInBatches(values []*model.ImSensitiveWord, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imSensitiveWordDo) Save(values ...*model.ImSensitiveWord) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imSensitiveWordDo) First() (*model.ImSensitiveWord, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSensitiveWord), nil
	}
}

func (i imSensitiveWordDo) Take() (*model.ImSensitiveWord, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSensitiveWord), nil
	}
}

func (i imSensitiveWordDo) Last() (*model.ImSensitiveWord, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSensitiveWord), nil
	}
}

func (i imSensitiveWordDo) Find() ([]*model.ImSensitiveWord, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImSensitiveWord), err
}

func (i imSensitiveWordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImSensitiveWord, err error) {
	buf := make([]*model.ImSensitiveWord, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imSensitiveWordDo) FindInBatches(result *[]*model.ImSensitiveWord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imSensitiveWordDo) Attrs(attrs ...field.AssignExpr) *imSensitiveWordDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imSensitiveWordDo) Assign(attrs ...field.AssignExpr) *imSensitiveWordDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imSensitiveWordDo) Joins(fields ...field.RelationField) *imSensitiveWordDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imSensitiveWordDo) Preload(fields ...field.RelationField) *imSensitiveWordDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imSensitiveWordDo) FirstOrInit() (*model.ImSensitiveWord, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSensitiveWord), nil
	}
}

func (i imSensitiveWordDo) FirstOrCreate() (*model.ImSensitiveWord, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSensitiveWord), nil
	}
}

func (i imSensitiveWordDo) FindByPage(offset int, limit int) (result []*model.ImSensitiveWord, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imSensitiveWordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imSensitiveWordDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imSensitiveWordDo) Delete(models ...*model.ImSensitiveWord) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imSensitiveWordDo) withDO(do gen.Dao) *imSensitiveWordDo {
	i.DO = *do.(*gen.DO)
	return i
}
