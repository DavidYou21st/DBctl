// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImSystemMessage(db *gorm.DB, opts ...gen.DOOption) imSystemMessage {
	_imSystemMessage := imSystemMessage{}

	_imSystemMessage.imSystemMessageDo.UseDB(db, opts...)
	_imSystemMessage.imSystemMessageDo.UseModel(&model.ImSystemMessage{})

	tableName := _imSystemMessage.imSystemMessageDo.TableName()
	_imSystemMessage.ALL = field.NewAsterisk(tableName)
	_imSystemMessage.ID = field.NewInt64(tableName, "id")
	_imSystemMessage.Recipient = field.NewString(tableName, "recipient")
	_imSystemMessage.MsgType = field.NewString(tableName, "msg_type")
	_imSystemMessage.Content = field.NewString(tableName, "content")
	_imSystemMessage.Remark = field.NewString(tableName, "remark")
	_imSystemMessage.Status = field.NewString(tableName, "status")
	_imSystemMessage.SendTime = field.NewInt64(tableName, "send_time")
	_imSystemMessage.CreatedBy = field.NewString(tableName, "created_by")
	_imSystemMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_imSystemMessage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_imSystemMessage.DeletedAt = field.NewField(tableName, "deleted_at")

	_imSystemMessage.fillFieldMap()

	return _imSystemMessage
}

type imSystemMessage struct {
	imSystemMessageDo imSystemMessageDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键id
	Recipient field.String // 接受者,全部或者user_id
	MsgType   field.String // 消息类型
	Content   field.String // 消息内容
	Remark    field.String // 备注
	Status    field.String // 成功或者失败
	SendTime  field.Int64  // 发送时间
	CreatedBy field.String // 创建人
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (i imSystemMessage) Table(newTableName string) *imSystemMessage {
	i.imSystemMessageDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imSystemMessage) As(alias string) *imSystemMessage {
	i.imSystemMessageDo.DO = *(i.imSystemMessageDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imSystemMessage) updateTableName(table string) *imSystemMessage {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.Recipient = field.NewString(table, "recipient")
	i.MsgType = field.NewString(table, "msg_type")
	i.Content = field.NewString(table, "content")
	i.Remark = field.NewString(table, "remark")
	i.Status = field.NewString(table, "status")
	i.SendTime = field.NewInt64(table, "send_time")
	i.CreatedBy = field.NewString(table, "created_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")

	i.fillFieldMap()

	return i
}

func (i *imSystemMessage) WithContext(ctx context.Context) *imSystemMessageDo {
	return i.imSystemMessageDo.WithContext(ctx)
}

func (i imSystemMessage) TableName() string { return i.imSystemMessageDo.TableName() }

func (i imSystemMessage) Alias() string { return i.imSystemMessageDo.Alias() }

func (i *imSystemMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imSystemMessage) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 11)
	i.fieldMap["id"] = i.ID
	i.fieldMap["recipient"] = i.Recipient
	i.fieldMap["msg_type"] = i.MsgType
	i.fieldMap["content"] = i.Content
	i.fieldMap["remark"] = i.Remark
	i.fieldMap["status"] = i.Status
	i.fieldMap["send_time"] = i.SendTime
	i.fieldMap["created_by"] = i.CreatedBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
}

func (i imSystemMessage) clone(db *gorm.DB) imSystemMessage {
	i.imSystemMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imSystemMessage) replaceDB(db *gorm.DB) imSystemMessage {
	i.imSystemMessageDo.ReplaceDB(db)
	return i
}

type imSystemMessageDo struct{ gen.DO }

func (i imSystemMessageDo) Debug() *imSystemMessageDo {
	return i.withDO(i.DO.Debug())
}

func (i imSystemMessageDo) WithContext(ctx context.Context) *imSystemMessageDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imSystemMessageDo) ReadDB() *imSystemMessageDo {
	return i.Clauses(dbresolver.Read)
}

func (i imSystemMessageDo) WriteDB() *imSystemMessageDo {
	return i.Clauses(dbresolver.Write)
}

func (i imSystemMessageDo) Session(config *gorm.Session) *imSystemMessageDo {
	return i.withDO(i.DO.Session(config))
}

func (i imSystemMessageDo) Clauses(conds ...clause.Expression) *imSystemMessageDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imSystemMessageDo) Returning(value interface{}, columns ...string) *imSystemMessageDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imSystemMessageDo) Not(conds ...gen.Condition) *imSystemMessageDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imSystemMessageDo) Or(conds ...gen.Condition) *imSystemMessageDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imSystemMessageDo) Select(conds ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imSystemMessageDo) Where(conds ...gen.Condition) *imSystemMessageDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imSystemMessageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imSystemMessageDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imSystemMessageDo) Order(conds ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imSystemMessageDo) Distinct(cols ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imSystemMessageDo) Omit(cols ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imSystemMessageDo) Join(table schema.Tabler, on ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imSystemMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imSystemMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imSystemMessageDo) Group(cols ...field.Expr) *imSystemMessageDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imSystemMessageDo) Having(conds ...gen.Condition) *imSystemMessageDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imSystemMessageDo) Limit(limit int) *imSystemMessageDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imSystemMessageDo) Offset(offset int) *imSystemMessageDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imSystemMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imSystemMessageDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imSystemMessageDo) Unscoped() *imSystemMessageDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imSystemMessageDo) Create(values ...*model.ImSystemMessage) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imSystemMessageDo) CreateInBatches(values []*model.ImSystemMessage, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imSystemMessageDo) Save(values ...*model.ImSystemMessage) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imSystemMessageDo) First() (*model.ImSystemMessage, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSystemMessage), nil
	}
}

func (i imSystemMessageDo) Take() (*model.ImSystemMessage, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSystemMessage), nil
	}
}

func (i imSystemMessageDo) Last() (*model.ImSystemMessage, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSystemMessage), nil
	}
}

func (i imSystemMessageDo) Find() ([]*model.ImSystemMessage, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImSystemMessage), err
}

func (i imSystemMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImSystemMessage, err error) {
	buf := make([]*model.ImSystemMessage, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imSystemMessageDo) FindInBatches(result *[]*model.ImSystemMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imSystemMessageDo) Attrs(attrs ...field.AssignExpr) *imSystemMessageDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imSystemMessageDo) Assign(attrs ...field.AssignExpr) *imSystemMessageDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imSystemMessageDo) Joins(fields ...field.RelationField) *imSystemMessageDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imSystemMessageDo) Preload(fields ...field.RelationField) *imSystemMessageDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imSystemMessageDo) FirstOrInit() (*model.ImSystemMessage, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSystemMessage), nil
	}
}

func (i imSystemMessageDo) FirstOrCreate() (*model.ImSystemMessage, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImSystemMessage), nil
	}
}

func (i imSystemMessageDo) FindByPage(offset int, limit int) (result []*model.ImSystemMessage, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imSystemMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imSystemMessageDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imSystemMessageDo) Delete(models ...*model.ImSystemMessage) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imSystemMessageDo) withDO(do gen.Dao) *imSystemMessageDo {
	i.DO = *do.(*gen.DO)
	return i
}
