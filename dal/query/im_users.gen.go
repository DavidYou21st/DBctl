// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fctl/dal/model"
)

func newImUser(db *gorm.DB, opts ...gen.DOOption) imUser {
	_imUser := imUser{}

	_imUser.imUserDo.UseDB(db, opts...)
	_imUser.imUserDo.UseModel(&model.ImUser{})

	tableName := _imUser.imUserDo.TableName()
	_imUser.ALL = field.NewAsterisk(tableName)
	_imUser.UserID = field.NewString(tableName, "user_id")
	_imUser.Account = field.NewString(tableName, "account")
	_imUser.UserSig = field.NewString(tableName, "user_sig")
	_imUser.PhoneNumber = field.NewString(tableName, "phone_number")
	_imUser.AreaCode = field.NewString(tableName, "area_code")
	_imUser.Email = field.NewString(tableName, "email")
	_imUser.Nickname = field.NewString(tableName, "nickname")
	_imUser.FaceURL = field.NewString(tableName, "face_url")
	_imUser.Gender = field.NewInt32(tableName, "gender")
	_imUser.BirthTime = field.NewTime(tableName, "birth_time")
	_imUser.Level = field.NewInt32(tableName, "level")
	_imUser.AllowVibration = field.NewInt32(tableName, "allow_vibration")
	_imUser.AllowBeep = field.NewInt32(tableName, "allow_beep")
	_imUser.AllowAddFriend = field.NewInt32(tableName, "allow_add_friend")
	_imUser.GlobalRecvMsgOpt = field.NewInt32(tableName, "global_recv_msg_opt")
	_imUser.Ex = field.NewString(tableName, "ex")
	_imUser.AppMangerLevel = field.NewInt32(tableName, "app_manger_level")
	_imUser.Motto = field.NewString(tableName, "motto")
	_imUser.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_imUser.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_imUser.Status = field.NewInt32(tableName, "status")
	_imUser.GroupMute = field.NewInt32(tableName, "group_mute")
	_imUser.FriendMute = field.NewInt32(tableName, "friend_mute")
	_imUser.IsPrivilegedUser = field.NewInt32(tableName, "is_privileged_user")
	_imUser.AllowCreateGroup = field.NewInt32(tableName, "allow_create_group")
	_imUser.CreateBy = field.NewString(tableName, "create_by")
	_imUser.UpdateBy = field.NewString(tableName, "update_by")
	_imUser.CreatedAt = field.NewTime(tableName, "created_at")
	_imUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_imUser.FreezeBy = field.NewString(tableName, "freeze_by")
	_imUser.FreezeAt = field.NewTime(tableName, "freeze_at")
	_imUser.FreezeRemark = field.NewString(tableName, "freeze_remark")
	_imUser.InIPWhitelist = field.NewInt32(tableName, "in_ip_whitelist")
	_imUser.FriendCount = field.NewInt32(tableName, "friend_count")
	_imUser.GroupCount = field.NewInt32(tableName, "group_count")
	_imUser.FreezeEndtime = field.NewTime(tableName, "freeze_endtime")

	_imUser.fillFieldMap()

	return _imUser
}

type imUser struct {
	imUserDo imUserDo

	ALL              field.Asterisk
	UserID           field.String // 用户ID
	Account          field.String // 帐户
	UserSig          field.String // 私钥
	PhoneNumber      field.String // 联系电话
	AreaCode         field.String // 区号
	Email            field.String // email
	Nickname         field.String // 昵称
	FaceURL          field.String // 头像
	Gender           field.Int32  // 性别 0=女性，1=男性
	BirthTime        field.Time   // 生日
	Level            field.Int32  // 等级
	AllowVibration   field.Int32  // 允许振动通知
	AllowBeep        field.Int32  // 允许声音通知
	AllowAddFriend   field.Int32  // 允许添加好友
	GlobalRecvMsgOpt field.Int32  // 允许通知信息
	Ex               field.String // 备注
	AppMangerLevel   field.Int32  // 管理等级
	Motto            field.String // 签名
	LastLoginIP      field.String // 最近登录IP
	LastLoginTime    field.Time   // 最近登录时间
	Status           field.Int32  // 状态 0=冻结，1=正常
	GroupMute        field.Int32  // 群聊禁言 0=未禁言，1=禁言中
	FriendMute       field.Int32  // 私聊禁言 0=未禁言，1=禁言中
	IsPrivilegedUser field.Int32  // 是否是特权用户, 0=不是，1=是
	AllowCreateGroup field.Int32  // 允许创建群聊 0=不允许，1=允许
	CreateBy         field.String // 创建人
	UpdateBy         field.String // 更新人
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	FreezeBy         field.String // 冻结操作人
	FreezeAt         field.Time   // 冻结时间
	FreezeRemark     field.String // 冻结原因
	InIPWhitelist    field.Int32  // 是否在IP白名单, 0=不是，1=是
	FriendCount      field.Int32  // 好友数
	GroupCount       field.Int32  // 群聊数
	FreezeEndtime    field.Time   // 冻结截止时间

	fieldMap map[string]field.Expr
}

func (i imUser) Table(newTableName string) *imUser {
	i.imUserDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i imUser) As(alias string) *imUser {
	i.imUserDo.DO = *(i.imUserDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *imUser) updateTableName(table string) *imUser {
	i.ALL = field.NewAsterisk(table)
	i.UserID = field.NewString(table, "user_id")
	i.Account = field.NewString(table, "account")
	i.UserSig = field.NewString(table, "user_sig")
	i.PhoneNumber = field.NewString(table, "phone_number")
	i.AreaCode = field.NewString(table, "area_code")
	i.Email = field.NewString(table, "email")
	i.Nickname = field.NewString(table, "nickname")
	i.FaceURL = field.NewString(table, "face_url")
	i.Gender = field.NewInt32(table, "gender")
	i.BirthTime = field.NewTime(table, "birth_time")
	i.Level = field.NewInt32(table, "level")
	i.AllowVibration = field.NewInt32(table, "allow_vibration")
	i.AllowBeep = field.NewInt32(table, "allow_beep")
	i.AllowAddFriend = field.NewInt32(table, "allow_add_friend")
	i.GlobalRecvMsgOpt = field.NewInt32(table, "global_recv_msg_opt")
	i.Ex = field.NewString(table, "ex")
	i.AppMangerLevel = field.NewInt32(table, "app_manger_level")
	i.Motto = field.NewString(table, "motto")
	i.LastLoginIP = field.NewString(table, "last_login_ip")
	i.LastLoginTime = field.NewTime(table, "last_login_time")
	i.Status = field.NewInt32(table, "status")
	i.GroupMute = field.NewInt32(table, "group_mute")
	i.FriendMute = field.NewInt32(table, "friend_mute")
	i.IsPrivilegedUser = field.NewInt32(table, "is_privileged_user")
	i.AllowCreateGroup = field.NewInt32(table, "allow_create_group")
	i.CreateBy = field.NewString(table, "create_by")
	i.UpdateBy = field.NewString(table, "update_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.FreezeBy = field.NewString(table, "freeze_by")
	i.FreezeAt = field.NewTime(table, "freeze_at")
	i.FreezeRemark = field.NewString(table, "freeze_remark")
	i.InIPWhitelist = field.NewInt32(table, "in_ip_whitelist")
	i.FriendCount = field.NewInt32(table, "friend_count")
	i.GroupCount = field.NewInt32(table, "group_count")
	i.FreezeEndtime = field.NewTime(table, "freeze_endtime")

	i.fillFieldMap()

	return i
}

func (i *imUser) WithContext(ctx context.Context) *imUserDo { return i.imUserDo.WithContext(ctx) }

func (i imUser) TableName() string { return i.imUserDo.TableName() }

func (i imUser) Alias() string { return i.imUserDo.Alias() }

func (i *imUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *imUser) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 36)
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["account"] = i.Account
	i.fieldMap["user_sig"] = i.UserSig
	i.fieldMap["phone_number"] = i.PhoneNumber
	i.fieldMap["area_code"] = i.AreaCode
	i.fieldMap["email"] = i.Email
	i.fieldMap["nickname"] = i.Nickname
	i.fieldMap["face_url"] = i.FaceURL
	i.fieldMap["gender"] = i.Gender
	i.fieldMap["birth_time"] = i.BirthTime
	i.fieldMap["level"] = i.Level
	i.fieldMap["allow_vibration"] = i.AllowVibration
	i.fieldMap["allow_beep"] = i.AllowBeep
	i.fieldMap["allow_add_friend"] = i.AllowAddFriend
	i.fieldMap["global_recv_msg_opt"] = i.GlobalRecvMsgOpt
	i.fieldMap["ex"] = i.Ex
	i.fieldMap["app_manger_level"] = i.AppMangerLevel
	i.fieldMap["motto"] = i.Motto
	i.fieldMap["last_login_ip"] = i.LastLoginIP
	i.fieldMap["last_login_time"] = i.LastLoginTime
	i.fieldMap["status"] = i.Status
	i.fieldMap["group_mute"] = i.GroupMute
	i.fieldMap["friend_mute"] = i.FriendMute
	i.fieldMap["is_privileged_user"] = i.IsPrivilegedUser
	i.fieldMap["allow_create_group"] = i.AllowCreateGroup
	i.fieldMap["create_by"] = i.CreateBy
	i.fieldMap["update_by"] = i.UpdateBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["freeze_by"] = i.FreezeBy
	i.fieldMap["freeze_at"] = i.FreezeAt
	i.fieldMap["freeze_remark"] = i.FreezeRemark
	i.fieldMap["in_ip_whitelist"] = i.InIPWhitelist
	i.fieldMap["friend_count"] = i.FriendCount
	i.fieldMap["group_count"] = i.GroupCount
	i.fieldMap["freeze_endtime"] = i.FreezeEndtime
}

func (i imUser) clone(db *gorm.DB) imUser {
	i.imUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i imUser) replaceDB(db *gorm.DB) imUser {
	i.imUserDo.ReplaceDB(db)
	return i
}

type imUserDo struct{ gen.DO }

func (i imUserDo) Debug() *imUserDo {
	return i.withDO(i.DO.Debug())
}

func (i imUserDo) WithContext(ctx context.Context) *imUserDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i imUserDo) ReadDB() *imUserDo {
	return i.Clauses(dbresolver.Read)
}

func (i imUserDo) WriteDB() *imUserDo {
	return i.Clauses(dbresolver.Write)
}

func (i imUserDo) Session(config *gorm.Session) *imUserDo {
	return i.withDO(i.DO.Session(config))
}

func (i imUserDo) Clauses(conds ...clause.Expression) *imUserDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i imUserDo) Returning(value interface{}, columns ...string) *imUserDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i imUserDo) Not(conds ...gen.Condition) *imUserDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i imUserDo) Or(conds ...gen.Condition) *imUserDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i imUserDo) Select(conds ...field.Expr) *imUserDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i imUserDo) Where(conds ...gen.Condition) *imUserDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i imUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *imUserDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i imUserDo) Order(conds ...field.Expr) *imUserDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i imUserDo) Distinct(cols ...field.Expr) *imUserDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i imUserDo) Omit(cols ...field.Expr) *imUserDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i imUserDo) Join(table schema.Tabler, on ...field.Expr) *imUserDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i imUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *imUserDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i imUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *imUserDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i imUserDo) Group(cols ...field.Expr) *imUserDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i imUserDo) Having(conds ...gen.Condition) *imUserDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i imUserDo) Limit(limit int) *imUserDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i imUserDo) Offset(offset int) *imUserDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i imUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *imUserDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i imUserDo) Unscoped() *imUserDo {
	return i.withDO(i.DO.Unscoped())
}

func (i imUserDo) Create(values ...*model.ImUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i imUserDo) CreateInBatches(values []*model.ImUser, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i imUserDo) Save(values ...*model.ImUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i imUserDo) First() (*model.ImUser, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImUser), nil
	}
}

func (i imUserDo) Take() (*model.ImUser, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImUser), nil
	}
}

func (i imUserDo) Last() (*model.ImUser, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImUser), nil
	}
}

func (i imUserDo) Find() ([]*model.ImUser, error) {
	result, err := i.DO.Find()
	return result.([]*model.ImUser), err
}

func (i imUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ImUser, err error) {
	buf := make([]*model.ImUser, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i imUserDo) FindInBatches(result *[]*model.ImUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i imUserDo) Attrs(attrs ...field.AssignExpr) *imUserDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i imUserDo) Assign(attrs ...field.AssignExpr) *imUserDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i imUserDo) Joins(fields ...field.RelationField) *imUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i imUserDo) Preload(fields ...field.RelationField) *imUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i imUserDo) FirstOrInit() (*model.ImUser, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImUser), nil
	}
}

func (i imUserDo) FirstOrCreate() (*model.ImUser, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ImUser), nil
	}
}

func (i imUserDo) FindByPage(offset int, limit int) (result []*model.ImUser, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i imUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i imUserDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i imUserDo) Delete(models ...*model.ImUser) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *imUserDo) withDO(do gen.Dao) *imUserDo {
	i.DO = *do.(*gen.DO)
	return i
}
